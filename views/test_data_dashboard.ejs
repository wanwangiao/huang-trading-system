<!DOCTYPE html>
<html lang="zh-TW">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>測試數據控制面板 - 蔬菜外送系統</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Microsoft YaHei', Arial, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      color: #333;
    }
    
    .header {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      padding: 20px 0;
      box-shadow: 0 2px 20px rgba(0,0,0,0.1);
      margin-bottom: 30px;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 20px;
    }
    
    h1 {
      text-align: center;
      color: #4a5568;
      font-size: 2.5em;
      margin-bottom: 10px;
    }
    
    .subtitle {
      text-align: center;
      color: #718096;
      font-size: 1.1em;
      margin-bottom: 20px;
    }
    
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin-bottom: 40px;
    }
    
    .stat-card {
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(10px);
      border-radius: 15px;
      padding: 25px;
      text-align: center;
      box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
      border: 1px solid rgba(255, 255, 255, 0.18);
      transition: transform 0.3s ease;
    }
    
    .stat-card:hover {
      transform: translateY(-5px);
    }
    
    .stat-number {
      font-size: 3em;
      font-weight: bold;
      color: #4299e1;
      margin-bottom: 10px;
    }
    
    .stat-label {
      font-size: 1.1em;
      color: #4a5568;
      margin-bottom: 15px;
    }
    
    .stat-detail {
      font-size: 0.9em;
      color: #718096;
    }
    
    .section {
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(10px);
      border-radius: 15px;
      padding: 30px;
      margin-bottom: 30px;
      box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
    }
    
    .section h2 {
      color: #2d3748;
      margin-bottom: 20px;
      font-size: 1.8em;
      border-bottom: 3px solid #4299e1;
      padding-bottom: 10px;
    }
    
    .order-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 15px;
    }
    
    .order-card {
      background: #f7fafc;
      border-radius: 10px;
      padding: 15px;
      border-left: 5px solid #4299e1;
      transition: all 0.3s ease;
    }
    
    .order-card:hover {
      background: #edf2f7;
      transform: scale(1.02);
    }
    
    .order-header {
      display: flex;
      justify-content: between;
      align-items: center;
      margin-bottom: 10px;
    }
    
    .order-id {
      font-weight: bold;
      color: #2b6cb0;
    }
    
    .order-status {
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 0.8em;
      font-weight: bold;
    }
    
    .status-placed { background: #fed7d7; color: #c53030; }
    .status-confirmed { background: #feebc8; color: #dd6b20; }
    .status-preparing { background: #fef5e7; color: #d69e2e; }
    .status-ready { background: #c6f6d5; color: #38a169; }
    .status-delivering { background: #bee3f8; color: #3182ce; }
    .status-delivered { background: #e6fffa; color: #319795; }
    .status-completed { background: #d6f5d6; color: #22543d; }
    
    .order-customer {
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .order-address {
      color: #4a5568;
      font-size: 0.9em;
      margin-bottom: 5px;
    }
    
    .order-total {
      font-weight: bold;
      color: #2b6cb0;
      text-align: right;
    }
    
    .action-buttons {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
      justify-content: center;
      margin-top: 20px;
    }
    
    .btn {
      padding: 12px 24px;
      border: none;
      border-radius: 25px;
      font-size: 1em;
      font-weight: bold;
      cursor: pointer;
      text-decoration: none;
      display: inline-block;
      transition: all 0.3s ease;
      color: white;
    }
    
    .btn-primary { background: linear-gradient(45deg, #4299e1, #3182ce); }
    .btn-success { background: linear-gradient(45deg, #48bb78, #38a169); }
    .btn-info { background: linear-gradient(45deg, #4299e1, #2b6cb0); }
    .btn-warning { background: linear-gradient(45deg, #ed8936, #dd6b20); }
    
    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    }
    
    .loading {
      text-align: center;
      padding: 40px;
      font-size: 1.2em;
      color: #4a5568;
    }
    
    @media (max-width: 768px) {
      .stats-grid {
        grid-template-columns: 1fr;
      }
      
      .order-grid {
        grid-template-columns: 1fr;
      }
      
      h1 {
        font-size: 2em;
      }
    }
  </style>
</head>
<body>
  <div class="header">
    <div class="container">
      <h1>🧪 測試數據控制面板</h1>
      <p class="subtitle">蔬菜外送系統 - 客戶下單測試數據驗證</p>
    </div>
  </div>

  <div class="container">
    <!-- 統計數據 -->
    <div class="stats-grid" id="statsGrid">
      <div class="loading">📊 載入統計數據中...</div>
    </div>

    <!-- 快速操作 -->
    <div class="section">
      <h2>🚀 快速操作</h2>
      <div class="action-buttons">
        <a href="/admin" class="btn btn-primary">📋 管理後台</a>
        <a href="/driver" class="btn btn-success">🚚 外送員界面</a>
        <a href="/admin/map" class="btn btn-info">🗺️ 地圖檢視</a>
        <a href="/websocket-test" class="btn btn-warning">🔌 WebSocket測試</a>
        <button onclick="refreshData()" class="btn btn-primary">🔄 重新整理</button>
        <button onclick="createMoreOrders()" class="btn btn-success">➕ 建立更多訂單</button>
      </div>
    </div>

    <!-- 最新訂單 -->
    <div class="section">
      <h2>📦 最新測試訂單</h2>
      <div class="order-grid" id="ordersGrid">
        <div class="loading">📦 載入訂單數據中...</div>
      </div>
    </div>

    <!-- 系統狀態 -->
    <div class="section">
      <h2>⚡ 系統功能測試狀態</h2>
      <div id="systemStatus">
        <div class="loading">🔍 檢查系統狀態中...</div>
      </div>
    </div>
  </div>

  <script>
    // 頁面載入時初始化
    document.addEventListener('DOMContentLoaded', function() {
      loadStats();
      loadOrders();
      checkSystemStatus();
    });

    // 載入統計數據
    async function loadStats() {
      try {
        const response = await fetch('/api/test/stats');
        const data = await response.json();
        
        const statsGrid = document.getElementById('statsGrid');
        statsGrid.innerHTML = '';
        
        const stats = [
          { number: data.totalOrders, label: '總訂單數', detail: '包含所有狀態訂單', icon: '📦' },
          { number: data.todayOrders, label: '今日新增', detail: '今天建立的訂單', icon: '📅' },
          { number: data.avgOrderValue, label: '平均訂單金額', detail: 'NT$ 元', icon: '💰' },
          { number: data.totalCustomers, label: '客戶數量', detail: '不重複客戶', icon: '👥' },
          { number: data.completedOrders, label: '已完成', detail: '成功配送訂單', icon: '✅' },
          { number: data.activeOrders, label: '進行中', detail: '配送中的訂單', icon: '🚚' }
        ];
        
        stats.forEach(stat => {
          const card = document.createElement('div');
          card.className = 'stat-card';
          card.innerHTML = `
            <div class="stat-number">${stat.icon} ${stat.number}</div>
            <div class="stat-label">${stat.label}</div>
            <div class="stat-detail">${stat.detail}</div>
          `;
          statsGrid.appendChild(card);
        });
        
      } catch (error) {
        console.error('載入統計數據失敗:', error);
        document.getElementById('statsGrid').innerHTML = 
          '<div style="color: red;">❌ 載入統計數據失敗</div>';
      }
    }

    // 載入訂單列表
    async function loadOrders() {
      try {
        const response = await fetch('/api/test/recent-orders');
        const data = await response.json();
        
        const ordersGrid = document.getElementById('ordersGrid');
        ordersGrid.innerHTML = '';
        
        if (data.orders.length === 0) {
          ordersGrid.innerHTML = '<div>📭 暫無訂單數據</div>';
          return;
        }
        
        data.orders.forEach(order => {
          const card = document.createElement('div');
          card.className = 'order-card';
          
          const statusClass = `status-${order.status}`;
          const statusText = getStatusText(order.status);
          
          card.innerHTML = `
            <div class="order-header">
              <span class="order-id">#${order.id}</span>
              <span class="order-status ${statusClass}">${statusText}</span>
            </div>
            <div class="order-customer">👤 ${order.contact_name}</div>
            <div class="order-address">📍 ${order.address}</div>
            <div class="order-total">💰 NT$ ${order.total_amount}</div>
          `;
          
          ordersGrid.appendChild(card);
        });
        
      } catch (error) {
        console.error('載入訂單失敗:', error);
        document.getElementById('ordersGrid').innerHTML = 
          '<div style="color: red;">❌ 載入訂單失敗</div>';
      }
    }

    // 檢查系統狀態
    async function checkSystemStatus() {
      const statusDiv = document.getElementById('systemStatus');
      
      const tests = [
        { name: 'WebSocket 連接', url: '/websocket-test', expected: 'WebSocket功能' },
        { name: 'Google Maps API', url: '/admin/map', expected: '地圖顯示' },
        { name: '管理後台', url: '/admin', expected: '後台界面' },
        { name: '外送員界面', url: '/driver', expected: '外送員系統' }
      ];
      
      let statusHTML = '<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px;">';
      
      for (const test of tests) {
        try {
          const response = await fetch(test.url);
          const status = response.ok ? '✅ 正常' : '❌ 異常';
          const color = response.ok ? '#38a169' : '#e53e3e';
          
          statusHTML += `
            <div style="background: #f7fafc; padding: 15px; border-radius: 10px; text-align: center;">
              <div style="font-weight: bold; margin-bottom: 5px;">${test.name}</div>
              <div style="color: ${color}; font-size: 1.2em;">${status}</div>
              <a href="${test.url}" target="_blank" style="font-size: 0.9em; color: #4299e1;">測試連結</a>
            </div>
          `;
        } catch (error) {
          statusHTML += `
            <div style="background: #f7fafc; padding: 15px; border-radius: 10px; text-align: center;">
              <div style="font-weight: bold; margin-bottom: 5px;">${test.name}</div>
              <div style="color: #e53e3e; font-size: 1.2em;">❌ 連接失敗</div>
            </div>
          `;
        }
      }
      
      statusHTML += '</div>';
      statusDiv.innerHTML = statusHTML;
    }

    // 狀態文字轉換
    function getStatusText(status) {
      const statusMap = {
        'placed': '已下單',
        'confirmed': '已確認',
        'preparing': '準備中',
        'ready': '準備完成',
        'delivering': '配送中',
        'delivered': '已送達',
        'completed': '已完成'
      };
      return statusMap[status] || status;
    }

    // 重新整理數據
    function refreshData() {
      loadStats();
      loadOrders();
      checkSystemStatus();
      
      // 顯示提示
      const btn = event.target;
      const originalText = btn.textContent;
      btn.textContent = '🔄 重新整理中...';
      btn.disabled = true;
      
      setTimeout(() => {
        btn.textContent = originalText;
        btn.disabled = false;
      }, 2000);
    }

    // 建立更多測試訂單
    async function createMoreOrders() {
      const btn = event.target;
      const originalText = btn.textContent;
      btn.textContent = '⏳ 建立中...';
      btn.disabled = true;
      
      try {
        const response = await fetch('/api/test/create-orders', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ count: 10 })
        });
        
        const result = await response.json();
        
        if (result.success) {
          alert(`✅ 成功建立 ${result.created} 筆測試訂單！`);
          refreshData();
        } else {
          alert(`❌ 建立失敗: ${result.message}`);
        }
        
      } catch (error) {
        console.error('建立訂單失敗:', error);
        alert('❌ 建立訂單時發生錯誤');
      } finally {
        btn.textContent = originalText;
        btn.disabled = false;
      }
    }
  </script>
</body>
</html>