<!DOCTYPE html>
<html lang="zh-Hant">
  <head>
    <meta charset="UTF-8">
    <title>後台｜地圖視圖</title>
    <link rel="stylesheet" href="/css/styles.css">
    <style>
      .map-container {
        display: flex;
        gap: 20px;
        margin-top: 20px;
      }
      .map-controls {
        width: 300px;
        background: #f5f5f5;
        padding: 20px;
        border-radius: 8px;
        height: fit-content;
      }
      #map {
        flex: 1;
        height: 600px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      }
      .control-group {
        margin-bottom: 20px;
      }
      .control-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
      }
      .control-group select, .control-group input {
        width: 100%;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }
      .btn {
        background: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
        margin-right: 10px;
        margin-bottom: 10px;
      }
      .btn:hover { background: #0056b3; }
      .btn-secondary { background: #6c757d; }
      .btn-secondary:hover { background: #545b62; }
      .btn-success { background: #28a745; }
      .btn-success:hover { background: #1e7e34; }
      .status-legend {
        margin-top: 15px;
      }
      .legend-item {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
      }
      .legend-color {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 8px;
      }
      .stats-panel {
        background: white;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
      }
      .route-info {
        background: #e7f3ff;
        padding: 10px;
        border-radius: 4px;
        margin-top: 10px;
        display: none;
      }
    </style>
  </head>
  <body>
    <h1>訂單地圖管理</h1>
    <p>
      <a href="/admin/dashboard">儀表板</a> |
      <a href="/admin/orders">訂單列表</a> |
      <a href="/admin/products">商品管理</a> |
      <a href="/admin/logout">登出</a>
    </p>
    
    <div class="map-container">
      <div class="map-controls">
        <!-- 統計面板 -->
        <div class="stats-panel">
          <h3>訂單統計</h3>
          <div id="orderStats">
            <div>總訂單: <span id="totalOrders">-</span></div>
            <div>待處理: <span id="pendingOrders">-</span></div>
            <div>配送中: <span id="deliveringOrders">-</span></div>
            <div>已完成: <span id="completedOrders">-</span></div>
          </div>
        </div>

        <!-- 篩選控制 -->
        <div class="control-group">
          <label for="statusFilter">訂單狀態篩選:</label>
          <select id="statusFilter">
            <option value="all">全部狀態</option>
            <option value="placed">已下單</option>
            <option value="quoted">已報價</option>
            <option value="paid">已付款</option>
            <option value="out_for_delivery">配送中</option>
            <option value="delivered">已送達</option>
            <option value="canceled">已取消</option>
          </select>
        </div>

        <div class="control-group">
          <label for="dateFilter">日期範圍:</label>
          <input type="date" id="dateFrom" placeholder="開始日期">
          <input type="date" id="dateTo" placeholder="結束日期" style="margin-top: 5px;">
        </div>

        <!-- 功能按鈕 -->
        <button class="btn" onclick="refreshMap()">🔄 重新載入</button>
        <button class="btn btn-secondary" onclick="clearMap()">🗑️ 清除地圖</button>
        <button class="btn btn-success" onclick="planRoute()">🛣️ 規劃路線</button>
        <button class="btn btn-secondary" onclick="geocodeOrders()">📍 批量地理編碼</button>
        
        <!-- 狀態圖例 -->
        <div class="status-legend">
          <h4>狀態圖例:</h4>
          <div class="legend-item">
            <div class="legend-color" style="background: #888888;"></div>
            <span>已下單</span>
          </div>
          <div class="legend-item">
            <div class="legend-color" style="background: #2f54eb;"></div>
            <span>已報價</span>
          </div>
          <div class="legend-item">
            <div class="legend-color" style="background: #52c41a;"></div>
            <span>已付款</span>
          </div>
          <div class="legend-item">
            <div class="legend-color" style="background: #fa8c16;"></div>
            <span>配送中</span>
          </div>
          <div class="legend-item">
            <div class="legend-color" style="background: #237804;"></div>
            <span>已送達</span>
          </div>
          <div class="legend-item">
            <div class="legend-color" style="background: #f5222d;"></div>
            <span>已取消</span>
          </div>
        </div>

        <!-- 路線資訊 -->
        <div id="routeInfo" class="route-info">
          <h4>路線資訊:</h4>
          <div id="routeDetails"></div>
        </div>
      </div>
      
      <div id="map"></div>
    </div>
    <script>
      let map;
      let markers = [];
      let currentOrders = [];
      let routeRenderer = null;
      
      const statusColors = {
        placed: '#888888',
        quoted: '#2f54eb', 
        paid: '#52c41a',
        out_for_delivery: '#fa8c16',
        delivered: '#237804',
        canceled: '#f5222d'
      };
      
      const statusNames = {
        placed: '已下單',
        quoted: '已報價',
        paid: '已付款', 
        out_for_delivery: '配送中',
        delivered: '已送達',
        canceled: '已取消'
      };
      
      function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
          center: { lat: 25.0330, lng: 121.5654 },
          zoom: 12,
          mapTypeControl: true,
          streetViewControl: true,
          fullscreenControl: true
        });
        
        // 初始載入地圖資料
        loadMapData();
        
        // 設定事件監聽器
        document.getElementById('statusFilter').addEventListener('change', loadMapData);
        document.getElementById('dateFrom').addEventListener('change', loadMapData);
        document.getElementById('dateTo').addEventListener('change', loadMapData);
      }
      
      function loadMapData() {
        const status = document.getElementById('statusFilter').value;
        const dateFrom = document.getElementById('dateFrom').value;
        const dateTo = document.getElementById('dateTo').value;
        
        const params = new URLSearchParams();
        if (status !== 'all') params.append('status', status);
        if (dateFrom) params.append('dateFrom', dateFrom);
        if (dateTo) params.append('dateTo', dateTo);
        
        fetch(`/api/maps/orders-map-data?${params}`)
          .then(res => res.json())
          .then(data => {
            if (data.success) {
              updateMap(data.data.orders);
              updateStats(data.data.orders);
            } else {
              console.error('載入地圖資料失敗:', data.message);
            }
          })
          .catch(error => {
            console.error('載入地圖資料錯誤:', error);
            // 降級到原有API
            loadLegacyMapData();
          });
      }
      
      function loadLegacyMapData() {
        fetch('/api/admin/orders-geo')
          .then(res => res.json())
          .then(data => {
            const orders = data.orders || [];
            updateMap(orders);
            updateStats(orders);
          })
          .catch(error => {
            console.error('載入地圖資料錯誤:', error);
          });
      }
      
      function updateMap(orders) {
        // 清除現有標記
        clearMarkers();
        
        currentOrders = orders;
        
        if (!orders || orders.length === 0) {
          console.log('沒有訂單資料可顯示');
          return;
        }
        
        const bounds = new google.maps.LatLngBounds();
        
        orders.forEach(order => {
          if (order.lat === null || order.lng === null) return;
          
          const pos = { lat: parseFloat(order.lat), lng: parseFloat(order.lng) };
          bounds.extend(pos);
          
          const color = statusColors[order.status] || '#888888';
          const marker = new google.maps.Marker({
            position: pos,
            map: map,
            title: `訂單 #${order.id}`,
            icon: {
              path: google.maps.SymbolPath.CIRCLE,
              scale: 8,
              fillColor: color,
              fillOpacity: 0.8,
              strokeColor: '#ffffff',
              strokeWeight: 2
            }
          });
          
          const content = `
            <div style="max-width: 300px;">
              <h4>訂單 #${order.id}</h4>
              <p><strong>客戶：</strong>${order.contact_name}</p>
              <p><strong>電話：</strong>${order.contact_phone}</p>
              <p><strong>狀態：</strong><span style="color: ${color}">${statusNames[order.status] || order.status}</span></p>
              <p><strong>金額：</strong>$${order.total}</p>
              <p><strong>地址：</strong>${order.address}</p>
              ${order.formatted_address ? `<p><strong>格式化地址：</strong>${order.formatted_address}</p>` : ''}
              <p><small>建立時間：${new Date(order.created_at).toLocaleString('zh-TW')}</small></p>
              ${order.geocoded_at ? `<p><small>地理編碼時間：${new Date(order.geocoded_at).toLocaleString('zh-TW')}</small></p>` : ''}
            </div>
          `;
          
          const infoWindow = new google.maps.InfoWindow({ content });
          
          marker.addListener('click', () => {
            // 關閉其他資訊窗
            markers.forEach(m => {
              if (m.infoWindow) {
                m.infoWindow.close();
              }
            });
            infoWindow.open(map, marker);
          });
          
          marker.infoWindow = infoWindow;
          markers.push(marker);
        });
        
        // 調整地圖視角以包含所有標記
        if (markers.length > 0) {
          map.fitBounds(bounds);
          // 防止過度放大
          google.maps.event.addListenerOnce(map, 'bounds_changed', function() {
            if (map.getZoom() > 16) {
              map.setZoom(16);
            }
          });
        }
      }
      
      function updateStats(orders) {
        const stats = {
          total: orders.length,
          placed: orders.filter(o => o.status === 'placed').length,
          quoted: orders.filter(o => o.status === 'quoted').length,
          paid: orders.filter(o => o.status === 'paid').length,
          out_for_delivery: orders.filter(o => o.status === 'out_for_delivery').length,
          delivered: orders.filter(o => o.status === 'delivered').length,
          canceled: orders.filter(o => o.status === 'canceled').length
        };
        
        document.getElementById('totalOrders').textContent = stats.total;
        document.getElementById('pendingOrders').textContent = stats.placed + stats.quoted;
        document.getElementById('deliveringOrders').textContent = stats.out_for_delivery;
        document.getElementById('completedOrders').textContent = stats.delivered;
      }
      
      function clearMarkers() {
        markers.forEach(marker => {
          marker.setMap(null);
        });
        markers = [];
      }
      
      function refreshMap() {
        loadMapData();
      }
      
      function clearMap() {
        clearMarkers();
        if (routeRenderer) {
          routeRenderer.setMap(null);
          routeRenderer = null;
        }
        document.getElementById('routeInfo').style.display = 'none';
      }
      
      function planRoute() {
        const deliveryOrders = currentOrders.filter(o => 
          o.status === 'paid' || o.status === 'out_for_delivery'
        );
        
        if (deliveryOrders.length < 2) {
          alert('需要至少2個待配送或配送中的訂單才能規劃路線');
          return;
        }
        
        // 取前10個訂單（Google Maps限制）
        const ordersForRoute = deliveryOrders.slice(0, 10);
        
        const origin = { lat: ordersForRoute[0].lat, lng: ordersForRoute[0].lng };
        const destination = { lat: ordersForRoute[ordersForRoute.length - 1].lat, lng: ordersForRoute[ordersForRoute.length - 1].lng };
        const waypoints = ordersForRoute.slice(1, -1).map(order => ({
          lat: parseFloat(order.lat),
          lng: parseFloat(order.lng)
        }));
        
        fetch('/api/maps/plan-route', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ origin, destination, waypoints })
        })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            displayRoute(data.data, ordersForRoute);
          } else {
            alert('路線規劃失敗: ' + data.message);
          }
        })
        .catch(error => {
          console.error('路線規劃錯誤:', error);
          alert('路線規劃服務錯誤');
        });
      }
      
      function displayRoute(routeData, orders) {
        // 清除舊路線
        if (routeRenderer) {
          routeRenderer.setMap(null);
        }
        
        // 建立新的路線渲染器
        routeRenderer = new google.maps.DirectionsRenderer({
          suppressMarkers: false,
          polylineOptions: {
            strokeColor: '#4285f4',
            strokeWeight: 4,
            strokeOpacity: 0.8
          }
        });
        
        // 顯示路線資訊
        const routeInfo = document.getElementById('routeInfo');
        const routeDetails = document.getElementById('routeDetails');
        
        routeDetails.innerHTML = `
          <div><strong>總距離:</strong> ${routeData.totalDistance} km</div>
          <div><strong>預估時間:</strong> ${routeData.totalDuration} 分鐘</div>
          <div><strong>訂單數量:</strong> ${orders.length} 個</div>
          <div><strong>優化順序:</strong> ${routeData.optimizedOrder ? '已優化' : '原順序'}</div>
        `;
        
        routeInfo.style.display = 'block';
        
        console.log('路線規劃結果:', routeData);
      }
      
      function geocodeOrders() {
        const ungeocodedOrders = currentOrders.filter(o => !o.lat || !o.lng);
        
        if (ungeocodedOrders.length === 0) {
          alert('所有訂單都已經有地理座標了');
          return;
        }
        
        if (!confirm(`發現 ${ungeocodedOrders.length} 個訂單沒有地理座標，是否進行批量地理編碼？`)) {
          return;
        }
        
        const orderIds = ungeocodedOrders.map(o => o.id);
        
        fetch('/api/maps/batch-geocode', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ orderIds })
        })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            alert(`批量地理編碼完成！成功: ${data.stats.successful}, 失敗: ${data.stats.failed}`);
            loadMapData(); // 重新載入地圖
          } else {
            alert('批量地理編碼失敗: ' + data.message);
          }
        })
        .catch(error => {
          console.error('批量地理編碼錯誤:', error);
          alert('批量地理編碼服務錯誤');
        });
      }
    </script>
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=<%= googleMapsApiKey %>&callback=initMap"></script>
  </body>
</html>