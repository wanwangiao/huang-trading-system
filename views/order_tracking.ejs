<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ë®ÇÂñÆËøΩËπ§ - ÊâøÂÑÑËî¨ËèúÂ§ñÈÄÅ</title>
    <link rel="stylesheet" href="/css/styles.css">
    <style>
        .tracking-container {
            max-width: 800px;
            margin: 2rem auto;
            padding: 1rem;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .order-header {
            text-align: center;
            padding: 2rem 0;
            border-bottom: 2px solid #e0e0e0;
            margin-bottom: 2rem;
        }

        .order-header h1 {
            color: #2e7d32;
            margin: 0 0 1rem 0;
        }

        .order-id {
            font-size: 1.5rem;
            color: #666;
            font-weight: bold;
        }

        .status-timeline {
            margin: 2rem 0;
        }

        .timeline-item {
            display: flex;
            margin-bottom: 2rem;
            position: relative;
        }

        .timeline-icon {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin-right: 1rem;
            flex-shrink: 0;
        }

        .timeline-icon.completed {
            background: #4caf50;
            color: white;
        }

        .timeline-icon.current {
            background: #ff9800;
            color: white;
            animation: pulse 2s infinite;
        }

        .timeline-icon.pending {
            background: #e0e0e0;
            color: #999;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        .timeline-content {
            flex: 1;
            padding-top: 0.5rem;
        }

        .timeline-title {
            font-size: 1.2rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .timeline-description {
            color: #666;
            margin-bottom: 0.5rem;
        }

        .timeline-time {
            color: #999;
            font-size: 0.9rem;
        }

        .order-details {
            background: #f5f5f5;
            padding: 1.5rem;
            border-radius: 8px;
            margin: 2rem 0;
        }

        .detail-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #e0e0e0;
        }

        .detail-row:last-child {
            border-bottom: none;
            margin-bottom: 0;
        }

        .detail-label {
            font-weight: bold;
            color: #333;
        }

        .detail-value {
            color: #666;
        }

        .map-container {
            height: 400px;
            border-radius: 8px;
            overflow: hidden;
            margin: 2rem 0;
            position: relative;
        }

        .map-loading {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            background: #f5f5f5;
            color: #666;
        }

        .driver-info {
            background: #e3f2fd;
            padding: 1.5rem;
            border-radius: 8px;
            margin: 2rem 0;
            border-left: 4px solid #2196f3;
        }

        .driver-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: #2196f3;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin-right: 1rem;
        }

        .driver-details {
            display: flex;
            align-items: center;
        }

        .driver-text {
            flex: 1;
        }

        .driver-name {
            font-weight: bold;
            font-size: 1.1rem;
            margin-bottom: 0.5rem;
        }

        .driver-contact {
            color: #666;
        }

        .estimated-time {
            text-align: center;
            padding: 1.5rem;
            background: #fff3e0;
            border-radius: 8px;
            margin: 2rem 0;
            border: 2px solid #ff9800;
        }

        .estimated-time h3 {
            color: #ef6c00;
            margin: 0 0 0.5rem 0;
        }

        .time-display {
            font-size: 2rem;
            font-weight: bold;
            color: #ef6c00;
        }

        .refresh-button {
            background: #2e7d32;
            color: white;
            border: none;
            padding: 0.8rem 1.5rem;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            margin: 1rem 0;
        }

        .refresh-button:hover {
            background: #1b5e20;
        }

        .notification-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            max-width: 350px;
        }

        .notification {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            margin-bottom: 10px;
            overflow: hidden;
            transform: translateX(100%);
            animation: slideIn 0.3s ease-out forwards;
        }

        .notification.notification-fade-out {
            animation: slideOut 0.3s ease-in forwards;
        }

        @keyframes slideIn {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }

        @keyframes slideOut {
            from { transform: translateX(0); }
            to { transform: translateX(100%); }
        }

        .notification-content {
            padding: 1rem;
            display: flex;
            align-items: flex-start;
        }

        .notification-icon {
            font-size: 1.5rem;
            margin-right: 0.8rem;
            flex-shrink: 0;
        }

        .notification-text {
            flex: 1;
        }

        .notification-title {
            font-weight: bold;
            margin-bottom: 0.3rem;
        }

        .notification-message {
            color: #666;
            font-size: 0.9rem;
        }

        .notification-close {
            background: none;
            border: none;
            font-size: 1.2rem;
            cursor: pointer;
            color: #999;
            margin-left: 0.5rem;
        }

        .notification-order {
            border-left: 4px solid #4caf50;
        }

        .notification-info {
            border-left: 4px solid #2196f3;
        }

        .notification-warning {
            border-left: 4px solid #ff9800;
        }

        .notification-error {
            border-left: 4px solid #f44336;
        }

        .connection-status {
            position: fixed;
            bottom: 20px;
            left: 20px;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .connection-status.connected {
            background: #4caf50;
            color: white;
        }

        .connection-status.disconnected {
            background: #f44336;
            color: white;
        }

        @media (max-width: 600px) {
            .tracking-container {
                margin: 1rem;
                padding: 0.8rem;
            }
            
            .timeline-item {
                margin-bottom: 1.5rem;
            }
            
            .timeline-icon {
                width: 50px;
                height: 50px;
                font-size: 1.2rem;
            }
            
            .map-container {
                height: 300px;
            }
            
            .notification-container {
                left: 10px;
                right: 10px;
                max-width: none;
            }
        }
    </style>
</head>
<body>
    <div class="tracking-container">
        <div class="order-header">
            <h1>Ë®ÇÂñÆËøΩËπ§</h1>
            <div class="order-id">Ë®ÇÂñÆÁ∑®Ëôü: #<span id="orderId"><%= order.id %></span></div>
            <button class="refresh-button" onclick="refreshOrderStatus()">üîÑ Âà∑Êñ∞ÁãÄÊÖã</button>
        </div>

        <!-- Ë®ÇÂñÆÁãÄÊÖãÊôÇÈñìËª∏ -->
        <div class="status-timeline" id="statusTimeline">
            <!-- ÂãïÊÖãÁîüÊàêÊôÇÈñìËª∏È†ÖÁõÆ -->
        </div>

        <!-- È†êË®àÈÄÅÈÅîÊôÇÈñì -->
        <div class="estimated-time" id="estimatedTimeSection" style="display: none;">
            <h3>üïí È†êË®àÈÄÅÈÅîÊôÇÈñì</h3>
            <div class="time-display" id="estimatedTime">--:--</div>
            <div id="countdown" style="margin-top: 1rem; color: #666;"></div>
        </div>

        <!-- Â§ñÈÄÅÂì°Ë≥áË®ä -->
        <div class="driver-info" id="driverInfo" style="display: none;">
            <h3>üöö Â§ñÈÄÅÂì°Ë≥áË®ä</h3>
            <div class="driver-details">
                <div class="driver-avatar" id="driverAvatar">üë§</div>
                <div class="driver-text">
                    <div class="driver-name" id="driverName">Loading...</div>
                    <div class="driver-contact">
                        üìû <span id="driverPhone">--</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Âú∞Âúñ -->
        <div class="map-container" id="mapContainer">
            <div class="map-loading">
                üìç Ê≠£Âú®ËºâÂÖ•Âú∞Âúñ...
            </div>
        </div>

        <!-- Ë®ÇÂñÆË©≥ÊÉÖ -->
        <div class="order-details">
            <h3>üìã Ë®ÇÂñÆË©≥ÊÉÖ</h3>
            <div class="detail-row">
                <span class="detail-label">ËÅØÁµ°‰∫∫:</span>
                <span class="detail-value"><%= order.contact_name %></span>
            </div>
            <div class="detail-row">
                <span class="detail-label">ÈõªË©±:</span>
                <span class="detail-value"><%= order.contact_phone %></span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Âú∞ÂùÄ:</span>
                <span class="detail-value"><%= order.address %></span>
            </div>
            <div class="detail-row">
                <span class="detail-label">Ë®ÇÂñÆÈáëÈ°ç:</span>
                <span class="detail-value">$<%= order.total %></span>
            </div>
            <div class="detail-row">
                <span class="detail-label">‰∏ãÂñÆÊôÇÈñì:</span>
                <span class="detail-value"><%= new Date(order.created_at).toLocaleString() %></span>
            </div>
            <div class="detail-row">
                <span class="detail-label">ÁõÆÂâçÁãÄÊÖã:</span>
                <span class="detail-value" data-order-status="<%= order.id %>">
                    <%= order.status %>
                </span>
            </div>
        </div>
    </div>

    <!-- ÈÄ£Êé•ÁãÄÊÖãÊåáÁ§∫Âô® -->
    <div class="connection-status disconnected" id="connectionStatus">
        üî¥ Êú™ÈÄ£Êé•
    </div>

    <!-- ËºâÂÖ•ÂøÖË¶ÅÁöÑJavaScript -->
    <script src="/js/realtime-notifications.js"></script>
    <script>
        // Ë®ÇÂñÆË≥áÊñô
        const orderData = <%- JSON.stringify(order) %>;
        const orderId = orderData.id;
        
        // ÁãÄÊÖãÂ∞çÊáâÁöÑÂúñÁ§∫ÂíåÊèèËø∞
        const statusConfig = {
            'placed': { icon: 'üìù', title: 'Ë®ÇÂñÆÊàêÁ´ã', description: 'ÊÇ®ÁöÑË®ÇÂñÆÂ∑≤ÊàêÂäüÂª∫Á´ã' },
            'confirmed': { icon: '‚úÖ', title: 'Ë®ÇÂñÆÁ¢∫Ë™ç', description: 'ÊàëÂÄëÂ∑≤Á¢∫Ë™çÊÇ®ÁöÑË®ÇÂñÆ' },
            'preparing': { icon: 'üë®‚Äçüç≥', title: 'ÂïÜÂìÅÊ∫ñÂÇô‰∏≠', description: 'Ê≠£Âú®ÁÇ∫ÊÇ®Ê∫ñÂÇôÊñ∞ÈÆÆÂïÜÂìÅ' },
            'ready': { icon: 'üì¶', title: 'ÂïÜÂìÅÊ∫ñÂÇôÂÆåÊàê', description: 'ÂïÜÂìÅÂ∑≤Ê∫ñÂÇôÂ•ΩÔºåÁ≠âÂæÖÂ§ñÈÄÅÂì°ÂèñË≤®' },
            'assigned': { icon: 'üöö', title: 'Â∑≤ÂàÜÈÖçÂ§ñÈÄÅÂì°', description: 'Â§ñÈÄÅÂì°Â∑≤Êé•ÂñÆÔºåÊ∫ñÂÇôÂèñË≤®' },
            'picked_up': { icon: 'üèÉ‚Äç‚ôÇÔ∏è', title: 'Â§ñÈÄÅÂì°Â∑≤ÂèñË≤®', description: 'Â§ñÈÄÅÂì°Â∑≤ÂèñÂæóÂïÜÂìÅÔºåÊ≠£Âú®ÂâçÂæÄÊÇ®ÁöÑÂú∞ÂùÄ' },
            'delivering': { icon: 'üõµ', title: 'ÈÖçÈÄÅ‰∏≠', description: 'Â§ñÈÄÅÂì°Ê≠£Âú®Ë∑Ø‰∏äÔºåÂç≥Â∞áÈÄÅÈÅî' },
            'delivered': { icon: 'üéâ', title: 'Â∑≤ÈÄÅÈÅî', description: 'ÂïÜÂìÅÂ∑≤ÊàêÂäüÈÄÅÈÅîÔºåÊÑüË¨ùÊÇ®ÁöÑË®ÇË≥º' },
            'completed': { icon: '‚ú®', title: 'Ë®ÇÂñÆÂÆåÊàê', description: 'Ë®ÇÂñÆÂ∑≤ÂÆåÊàêÔºåÊ≠°ËøéÂÜçÊ¨°Ë®ÇË≥º' },
            'cancelled': { icon: '‚ùå', title: 'Ë®ÇÂñÆÂèñÊ∂à', description: 'ÂæàÊä±Ê≠âÔºåË®ÇÂñÆÂ∑≤Ë¢´ÂèñÊ∂à' }
        };

        // Ë®ÇÂñÆÁãÄÊÖãÈ†ÜÂ∫è
        const statusOrder = ['placed', 'confirmed', 'preparing', 'ready', 'assigned', 'picked_up', 'delivering', 'delivered', 'completed'];
        
        let orderTrackingMap = null;

        // ÂàùÂßãÂåñÈ†ÅÈù¢
        document.addEventListener('DOMContentLoaded', function() {
            initializeOrderTracking();
            loadGoogleMaps();
        });

        /**
         * ÂàùÂßãÂåñË®ÇÂñÆËøΩËπ§
         */
        function initializeOrderTracking() {
            // Ê∏≤ÊüìÁãÄÊÖãÊôÇÈñìËª∏
            renderStatusTimeline();
            
            // Áõ£ËÅΩÂç≥ÊôÇÈÄöÁü•‰∫ã‰ª∂
            if (window.realtimeNotifications) {
                // Ë®ÇÈñ±Ë®ÇÂñÆÊõ¥Êñ∞
                window.realtimeNotifications.subscribeToOrder(orderId);
                
                // Áõ£ËÅΩÈÄ£Êé•ÁãÄÊÖãËÆäÂåñ
                window.realtimeNotifications.on('connected', updateConnectionStatus);
                window.realtimeNotifications.on('disconnected', updateConnectionStatus);
                
                // Áõ£ËÅΩË®ÇÂñÆÊõ¥Êñ∞
                window.realtimeNotifications.on('orderUpdate', handleOrderUpdate);
                
                // Áõ£ËÅΩÂ§ñÈÄÅÂì°‰ΩçÁΩÆÊõ¥Êñ∞
                window.realtimeNotifications.on('driverLocation', handleDriverLocationUpdate);
            }

            // Áç≤ÂèñÊúÄÊñ∞Ë®ÇÂñÆÁãÄÊÖã
            refreshOrderStatus();
        }

        /**
         * Ê∏≤ÊüìÁãÄÊÖãÊôÇÈñìËª∏
         */
        function renderStatusTimeline() {
            const timelineContainer = document.getElementById('statusTimeline');
            const currentStatus = orderData.status;
            const currentIndex = statusOrder.indexOf(currentStatus);
            
            let html = '';
            
            statusOrder.forEach((status, index) => {
                const config = statusConfig[status];
                let iconClass = 'pending';
                
                if (index < currentIndex) {
                    iconClass = 'completed';
                } else if (index === currentIndex) {
                    iconClass = 'current';
                }
                
                html += `
                    <div class="timeline-item">
                        <div class="timeline-icon ${iconClass}">
                            ${config.icon}
                        </div>
                        <div class="timeline-content">
                            <div class="timeline-title">${config.title}</div>
                            <div class="timeline-description">${config.description}</div>
                            <div class="timeline-time" id="time-${status}"></div>
                        </div>
                    </div>
                `;
            });
            
            timelineContainer.innerHTML = html;
        }

        /**
         * ËôïÁêÜË®ÇÂñÆÊõ¥Êñ∞
         */
        function handleOrderUpdate(data) {
            console.log('Êî∂Âà∞Ë®ÇÂñÆÊõ¥Êñ∞:', data);
            
            // Êõ¥Êñ∞ÊôÇÈñìËª∏
            renderStatusTimeline();
            
            // Êõ¥Êñ∞È†êË®àÈÄÅÈÅîÊôÇÈñì
            if (data.estimatedDeliveryTime) {
                updateEstimatedDeliveryTime(data.estimatedDeliveryTime);
            }
            
            // Êõ¥Êñ∞Â§ñÈÄÅÂì°Ë≥áË®ä
            if (data.driverInfo) {
                updateDriverInfo(data.driverInfo);
                
                // Ë®ÇÈñ±Â§ñÈÄÅÂì°‰ΩçÁΩÆÊõ¥Êñ∞
                if (data.driverInfo.id) {
                    window.realtimeNotifications.subscribeToDriver(data.driverInfo.id);
                }
            }
        }

        /**
         * ËôïÁêÜÂ§ñÈÄÅÂì°‰ΩçÁΩÆÊõ¥Êñ∞
         */
        function handleDriverLocationUpdate(data) {
            console.log('Êî∂Âà∞Â§ñÈÄÅÂì°‰ΩçÁΩÆÊõ¥Êñ∞:', data);
            
            // Êõ¥Êñ∞Âú∞Âúñ‰∏äÁöÑÂ§ñÈÄÅÂì°‰ΩçÁΩÆ
            if (orderTrackingMap && orderTrackingMap.updateDriverLocation) {
                orderTrackingMap.updateDriverLocation({
                    lat: data.lat,
                    lng: data.lng,
                    timestamp: data.timestamp
                });
            }
        }

        /**
         * Êõ¥Êñ∞ÈÄ£Êé•ÁãÄÊÖã
         */
        function updateConnectionStatus(data) {
            const statusEl = document.getElementById('connectionStatus');
            if (window.realtimeNotifications && window.realtimeNotifications.isConnected) {
                statusEl.className = 'connection-status connected';
                statusEl.textContent = 'üü¢ Âç≥ÊôÇÈÄ£Êé•';
            } else {
                statusEl.className = 'connection-status disconnected';
                statusEl.textContent = 'üî¥ ÈÄ£Êé•‰∏≠Êñ∑';
            }
        }

        /**
         * Êõ¥Êñ∞È†êË®àÈÄÅÈÅîÊôÇÈñì
         */
        function updateEstimatedDeliveryTime(deliveryTime) {
            const estimatedTimeSection = document.getElementById('estimatedTimeSection');
            const estimatedTimeEl = document.getElementById('estimatedTime');
            const countdownEl = document.getElementById('countdown');
            
            if (deliveryTime) {
                const deliveryDate = new Date(deliveryTime);
                estimatedTimeEl.textContent = deliveryDate.toLocaleTimeString();
                estimatedTimeSection.style.display = 'block';
                
                // ÈñãÂßãÂÄíÊï∏Ë®àÊôÇ
                startCountdown(deliveryDate, countdownEl);
            }
        }

        /**
         * ÈñãÂßãÂÄíÊï∏Ë®àÊôÇ
         */
        function startCountdown(targetDate, element) {
            const updateCountdown = () => {
                const now = new Date();
                const timeDiff = targetDate - now;
                
                if (timeDiff > 0) {
                    const minutes = Math.floor(timeDiff / (1000 * 60));
                    const seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);
                    element.textContent = `ÈÇÑÊúâ ${minutes} ÂàÜ ${seconds} Áßí`;
                } else {
                    element.textContent = 'È†êË®àÈÄÅÈÅîÊôÇÈñìÂ∑≤Âà∞';
                    clearInterval(countdownTimer);
                }
            };
            
            updateCountdown();
            const countdownTimer = setInterval(updateCountdown, 1000);
        }

        /**
         * Êõ¥Êñ∞Â§ñÈÄÅÂì°Ë≥áË®ä
         */
        function updateDriverInfo(driverInfo) {
            const driverInfoSection = document.getElementById('driverInfo');
            const driverNameEl = document.getElementById('driverName');
            const driverPhoneEl = document.getElementById('driverPhone');
            const driverAvatarEl = document.getElementById('driverAvatar');
            
            driverNameEl.textContent = driverInfo.name || 'Êú™Áü•';
            driverPhoneEl.textContent = driverInfo.phone || '--';
            driverAvatarEl.textContent = driverInfo.name ? driverInfo.name.charAt(0) : 'üë§';
            
            driverInfoSection.style.display = 'block';
        }

        /**
         * Âà∑Êñ∞Ë®ÇÂñÆÁãÄÊÖã
         */
        async function refreshOrderStatus() {
            try {
                const response = await fetch(`/api/orders/${orderId}/status`);
                if (response.ok) {
                    const data = await response.json();
                    console.log('Ë®ÇÂñÆÁãÄÊÖãÂ∑≤Êõ¥Êñ∞:', data);
                    
                    // Êõ¥Êñ∞ÂÖ®ÂüüË®ÇÂñÆË≥áÊñô
                    Object.assign(orderData, data);
                    
                    // ÈáçÊñ∞Ê∏≤ÊüìÊôÇÈñìËª∏
                    renderStatusTimeline();
                    
                    // Êõ¥Êñ∞ÂÖ∂‰ªñË≥áË®ä
                    if (data.estimated_delivery_time) {
                        updateEstimatedDeliveryTime(data.estimated_delivery_time);
                    }
                    
                    if (data.driver) {
                        updateDriverInfo(data.driver);
                    }
                }
            } catch (error) {
                console.error('Âà∑Êñ∞Ë®ÇÂñÆÁãÄÊÖãÂ§±Êïó:', error);
            }
        }

        /**
         * ËºâÂÖ• Google Maps
         */
        function loadGoogleMaps() {
            if (typeof google !== 'undefined') {
                initMap();
                return;
            }
            
            // ÂãïÊÖãËºâÂÖ• Google Maps API
            const script = document.createElement('script');
            script.src = 'https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap';
            script.async = true;
            document.head.appendChild(script);
        }

        /**
         * ÂàùÂßãÂåñÂú∞Âúñ
         */
        function initMap() {
            const mapContainer = document.getElementById('mapContainer');
            
            // È†êË®≠Âè∞‰∏≠‰ΩçÁΩÆ
            const defaultLocation = { lat: 24.1477, lng: 120.6736 };
            
            // Â¶ÇÊûúË®ÇÂñÆÊúâÂ∫ßÊ®ôÔºå‰ΩøÁî®Ë®ÇÂñÆÂ∫ßÊ®ô
            let orderLocation = defaultLocation;
            if (orderData.lat && orderData.lng) {
                orderLocation = {
                    lat: parseFloat(orderData.lat),
                    lng: parseFloat(orderData.lng)
                };
            }
            
            const map = new google.maps.Map(mapContainer, {
                zoom: 14,
                center: orderLocation,
                styles: [
                    {
                        featureType: 'poi',
                        elementType: 'labels.icon',
                        stylers: [{ visibility: 'off' }]
                    }
                ]
            });
            
            // Âª∫Á´ãË®ÇÂñÆ‰ΩçÁΩÆÊ®ôË®ò
            const orderMarker = new google.maps.Marker({
                position: orderLocation,
                map: map,
                title: 'ÈÄÅÈÅîÂú∞ÂùÄ',
                icon: {
                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#4CAF50" width="32px" height="32px">
                            <path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"/>
                        </svg>
                    `),
                    scaledSize: new google.maps.Size(32, 32)
                }
            });
            
            // Âª∫Á´ãÂ§ñÈÄÅÂì°Ê®ôË®ò (ÂàùÂßãÈö±Ëóè)
            const driverMarker = new google.maps.Marker({
                map: map,
                title: 'Â§ñÈÄÅÂì°‰ΩçÁΩÆ',
                visible: false,
                icon: {
                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#FF9800" width="32px" height="32px">
                            <path d="M19 15l-6 6-6-6h6V3h6v12z"/>
                        </svg>
                    `),
                    scaledSize: new google.maps.Size(32, 32)
                }
            });
            
            // Âª∫Á´ãË∑ØÁ∑öÈ°ØÁ§∫
            const directionsRenderer = new google.maps.DirectionsRenderer({
                suppressMarkers: true,
                polylineOptions: {
                    strokeColor: '#FF9800',
                    strokeWeight: 4,
                    strokeOpacity: 0.8
                }
            });
            directionsRenderer.setMap(map);
            
            // Âª∫Á´ãÂú∞ÂúñÊéßÂà∂Áâ©‰ª∂
            orderTrackingMap = {
                map: map,
                orderMarker: orderMarker,
                driverMarker: driverMarker,
                directionsRenderer: directionsRenderer,
                
                updateDriverLocation: function(locationData) {
                    const driverPosition = {
                        lat: locationData.lat,
                        lng: locationData.lng
                    };
                    
                    this.driverMarker.setPosition(driverPosition);
                    this.driverMarker.setVisible(true);
                    
                    // Ë®àÁÆó‰∏¶È°ØÁ§∫Ë∑ØÁ∑ö
                    this.calculateRoute(driverPosition, orderLocation);
                },
                
                calculateRoute: function(origin, destination) {
                    const directionsService = new google.maps.DirectionsService();
                    
                    directionsService.route({
                        origin: origin,
                        destination: destination,
                        travelMode: google.maps.TravelMode.DRIVING,
                        avoidHighways: false,
                        avoidTolls: false
                    }, (response, status) => {
                        if (status === 'OK') {
                            this.directionsRenderer.setDirections(response);
                            
                            // Ë™øÊï¥Âú∞ÂúñË¶ñËßí‰ª•ÂåÖÂê´ÂÖ©ÂÄãÈªû
                            const bounds = new google.maps.LatLngBounds();
                            bounds.extend(origin);
                            bounds.extend(destination);
                            this.map.fitBounds(bounds);
                        }
                    });
                }
            };
            
            // Â∞áÂú∞ÂúñÁâ©‰ª∂Ë®≠ÁÇ∫ÂÖ®ÂüüËÆäÊï∏
            window.orderTrackingMap = orderTrackingMap;
            
            console.log('Âú∞ÂúñÂ∑≤ÂàùÂßãÂåñ');
        }
    </script>
</body>
</html>