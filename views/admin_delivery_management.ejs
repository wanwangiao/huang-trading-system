<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>智能配送管理中心 - 承億蔬菜外送系統</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        /* ===== 全局樣式 ===== */
        :root {
            --primary-color: #28a745;
            --secondary-color: #007bff;
            --success-color: #20c997;
            --warning-color: #ffc107;
            --danger-color: #dc3545;
            --info-color: #17a2b8;
        }
        
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        /* ===== 主容器布局 ===== */
        .delivery-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            margin: 20px;
            overflow: hidden;
        }

        .delivery-grid {
            display: grid;
            grid-template-columns: 30% 40% 30%;
            gap: 0;
            min-height: calc(100vh - 180px);
        }

        .panel {
            padding: 20px;
            border-right: 2px solid #e9ecef;
        }

        .panel:last-child {
            border-right: none;
        }

        .panel-header {
            background: linear-gradient(135deg, var(--primary-color), var(--success-color));
            color: white;
            padding: 15px 20px;
            margin: -20px -20px 20px -20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        /* ===== 快捷導航系統 ===== */
        .quick-nav {
            position: fixed;
            bottom: 30px;
            right: 30px;
            z-index: 1050;
        }

        .quick-nav-toggle {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--primary-color), var(--success-color));
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            box-shadow: 0 4px 20px rgba(40, 167, 69, 0.4);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .quick-nav-toggle:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 25px rgba(40, 167, 69, 0.6);
        }

        .quick-nav-menu {
            position: absolute;
            bottom: 70px;
            right: 0;
            background: white;
            border-radius: 15px;
            padding: 10px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.3s ease;
            pointer-events: none;
            min-width: 200px;
        }

        .quick-nav-menu.show {
            opacity: 1;
            transform: translateY(0);
            pointer-events: all;
        }

        .quick-nav-item {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            text-decoration: none;
            color: #333;
            border-radius: 8px;
            transition: all 0.2s ease;
            margin: 5px 0;
        }

        .quick-nav-item:hover {
            background: #f8f9fa;
            color: var(--primary-color);
            transform: translateX(5px);
        }

        .quick-nav-item i {
            margin-right: 10px;
            font-size: 16px;
            width: 20px;
            text-align: center;
        }

        /* ===== 訂單面板樣式 ===== */
        .order-panel {
            background: #f8f9fa;
        }

        .order-item {
            background: white;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 10px;
            border-left: 4px solid var(--primary-color);
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
        }

        .order-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .order-item.selected {
            border-left-color: var(--warning-color);
            background: #fff3cd;
        }

        .order-status {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
        }

        .status-paid { background: #d4edda; color: #155724; }
        .status-ready { background: #cce7ff; color: #0066cc; }
        .status-delivering { background: #fff3cd; color: #856404; }
        .status-delivered { background: #d1ecf1; color: #0c5460; }

        /* ===== 路線優化面板樣式 ===== */
        .route-panel {
            background: #f1f8ff;
        }

        .route-controls {
            background: white;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
        }

        .optimization-result {
            background: white;
            border-radius: 10px;
            padding: 15px;
            display: none;
        }

        .route-item {
            background: #e3f2fd;
            border-radius: 8px;
            padding: 10px;
            margin: 8px 0;
            border-left: 3px solid var(--secondary-color);
        }

        /* ===== 地圖面板樣式 ===== */
        .map-panel {
            background: #f0f8f0;
        }

        #delivery-map {
            width: 100%;
            height: 400px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .map-controls {
            background: white;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: white;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            border-left: 4px solid var(--info-color);
        }

        /* ===== 響應式設計 ===== */
        @media (max-width: 1200px) {
            .delivery-grid {
                grid-template-columns: 1fr;
                grid-template-rows: auto auto 1fr;
            }
            
            .panel {
                border-right: none;
                border-bottom: 2px solid #e9ecef;
            }
            
            .panel:last-child {
                border-bottom: none;
            }
            
            #delivery-map {
                height: 300px;
            }
        }

        /* ===== 動畫效果 ===== */
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .pulse {
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(40, 167, 69, 0.4); }
            70% { box-shadow: 0 0 0 10px rgba(40, 167, 69, 0); }
            100% { box-shadow: 0 0 0 0 rgba(40, 167, 69, 0); }
        }

        /* ===== 載入動畫 ===== */
        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 200px;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <!-- 主標題 -->
    <nav class="navbar navbar-expand-lg navbar-dark" style="background: rgba(255,255,255,0.1); backdrop-filter: blur(10px);">
        <div class="container">
            <a class="navbar-brand fw-bold" href="/admin">
                <i class="fas fa-truck"></i> 智能配送管理中心
            </a>
            <div class="navbar-nav ms-auto">
                <span class="navbar-text text-white">
                    <i class="fas fa-clock"></i> <span id="current-time"></span>
                </span>
            </div>
        </div>
    </nav>

    <!-- 主要內容容器 -->
    <div class="delivery-container">
        <div class="delivery-grid">
            <!-- 左側：訂單面板 -->
            <div class="panel order-panel">
                <div class="panel-header">
                    <h5><i class="fas fa-shopping-cart"></i> 待配送訂單</h5>
                    <span class="badge bg-light text-dark" id="order-count">0</span>
                </div>
                
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="fw-bold text-primary" id="total-orders">0</div>
                        <small>總訂單</small>
                    </div>
                    <div class="stat-card">
                        <div class="fw-bold text-success" id="ready-orders">0</div>
                        <small>待配送</small>
                    </div>
                </div>

                <div class="mb-3">
                    <select class="form-select" id="order-filter">
                        <option value="all">全部訂單</option>
                        <option value="paid">已付款</option>
                        <option value="ready">包裝完成</option>
                        <option value="delivering">配送中</option>
                    </select>
                </div>

                <div id="orders-container" class="fade-in">
                    <div class="loading">
                        <div class="spinner"></div>
                    </div>
                </div>
            </div>

            <!-- 中間：路線優化面板 -->
            <div class="panel route-panel">
                <div class="panel-header">
                    <h5><i class="fas fa-route"></i> 智能路線優化</h5>
                    <button class="btn btn-sm btn-light" id="optimize-btn">
                        <i class="fas fa-magic"></i> 一鍵優化
                    </button>
                </div>

                <div class="route-controls">
                    <div class="row">
                        <div class="col-6">
                            <label class="form-label">優化算法</label>
                            <select class="form-select" id="optimization-method">
                                <option value="hybrid">智能混合</option>
                                <option value="nearest">最近鄰算法</option>
                                <option value="genetic">遺傳算法</option>
                            </select>
                        </div>
                        <div class="col-6">
                            <label class="form-label">最大路線數</label>
                            <input type="number" class="form-control" id="max-routes" value="3" min="1" max="10">
                        </div>
                    </div>
                </div>

                <div id="optimization-result" class="optimization-result">
                    <h6><i class="fas fa-chart-line"></i> 優化結果</h6>
                    <div id="route-summary"></div>
                    <div id="routes-list"></div>
                </div>

                <div id="route-loading" class="loading" style="display: none;">
                    <div class="spinner"></div>
                </div>
            </div>

            <!-- 右側：地圖面板 -->
            <div class="panel map-panel">
                <div class="panel-header">
                    <h5><i class="fas fa-map"></i> 即時配送地圖</h5>
                    <button class="btn btn-sm btn-light" id="refresh-map">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>

                <div class="map-controls">
                    <div class="row">
                        <div class="col-6">
                            <button class="btn btn-primary btn-sm w-100" id="show-all">
                                <i class="fas fa-eye"></i> 顯示全部
                            </button>
                        </div>
                        <div class="col-6">
                            <button class="btn btn-secondary btn-sm w-100" id="clear-map">
                                <i class="fas fa-eraser"></i> 清除地圖
                            </button>
                        </div>
                    </div>
                </div>

                <div id="delivery-map"></div>

                <div class="mt-3">
                    <div class="row">
                        <div class="col-6">
                            <div class="stat-card">
                                <div class="fw-bold text-info" id="total-distance">0 km</div>
                                <small>總距離</small>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="stat-card">
                                <div class="fw-bold text-warning" id="estimated-time">0 分鐘</div>
                                <small>預估時間</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 快捷導航系統 -->
    <div class="quick-nav">
        <button class="quick-nav-toggle pulse" id="quick-nav-toggle">
            <i class="fas fa-bars"></i>
        </button>
        <div class="quick-nav-menu" id="quick-nav-menu">
            <a href="/admin" class="quick-nav-item">
                <i class="fas fa-tachometer-alt"></i> 後台首頁
            </a>
            <a href="/admin/orders" class="quick-nav-item">
                <i class="fas fa-shopping-cart"></i> 訂單管理
            </a>
            <a href="/admin/products" class="quick-nav-item">
                <i class="fas fa-box"></i> 商品管理
            </a>
            <a href="/admin/inventory" class="quick-nav-item">
                <i class="fas fa-warehouse"></i> 庫存管理
            </a>
            <a href="/admin/reports" class="quick-nav-item">
                <i class="fas fa-chart-bar"></i> 統計報表
            </a>
            <a href="/admin/delivery" class="quick-nav-item">
                <i class="fas fa-truck"></i> 配送管理
            </a>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // ===== 全局變量 =====
        let map;
        let markers = [];
        let currentOrders = [];
        let optimizedRoutes = [];
        let selectedOrders = [];

        // ===== 頁面初始化 =====
        document.addEventListener('DOMContentLoaded', function() {
            initializePage();
            initializeQuickNav();
            updateCurrentTime();
        });

        function initializePage() {
            loadOrders();
            initializeEventListeners();
            // 地圖將在 Google Maps API 載入後初始化
        }

        // ===== 快捷導航系統 =====
        function initializeQuickNav() {
            const toggle = document.getElementById('quick-nav-toggle');
            const menu = document.getElementById('quick-nav-menu');
            
            toggle.addEventListener('click', function() {
                menu.classList.toggle('show');
                const icon = toggle.querySelector('i');
                icon.className = menu.classList.contains('show') ? 'fas fa-times' : 'fas fa-bars';
            });

            // 點擊外部關閉選單
            document.addEventListener('click', function(e) {
                if (!e.target.closest('.quick-nav')) {
                    menu.classList.remove('show');
                    toggle.querySelector('i').className = 'fas fa-bars';
                }
            });

            // 鍵盤快捷鍵支援
            document.addEventListener('keydown', function(e) {
                if (e.ctrlKey) {
                    switch(e.key) {
                        case '1': window.location.href = '/admin'; break;
                        case '2': window.location.href = '/admin/orders'; break;
                        case '3': window.location.href = '/admin/products'; break;
                        case '4': window.location.href = '/admin/inventory'; break;
                        case '5': window.location.href = '/admin/reports'; break;
                        case '6': window.location.href = '/admin/delivery'; break;
                    }
                }
            });
        }

        // ===== 時間更新 =====
        function updateCurrentTime() {
            const now = new Date();
            const timeString = now.toLocaleTimeString('zh-TW');
            document.getElementById('current-time').textContent = timeString;
            setTimeout(updateCurrentTime, 1000);
        }

        // ===== 事件監聽器 =====
        function initializeEventListeners() {
            document.getElementById('order-filter').addEventListener('change', loadOrders);
            document.getElementById('optimize-btn').addEventListener('click', optimizeRoutes);
            document.getElementById('refresh-map').addEventListener('click', refreshMap);
            document.getElementById('show-all').addEventListener('click', showAllOnMap);
            document.getElementById('clear-map').addEventListener('click', clearMap);
        }

        // ===== 訂單載入 =====
        async function loadOrders() {
            const filter = document.getElementById('order-filter').value;
            
            try {
                const response = await fetch(`/api/admin/delivery/orders?status=${filter}`);
                const data = await response.json();
                
                if (data.success) {
                    currentOrders = data.orders;
                    displayOrders(currentOrders);
                    updateOrderStats(currentOrders);
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('載入訂單失敗:', error);
                document.getElementById('orders-container').innerHTML = 
                    '<div class="alert alert-danger">載入訂單失敗，請重新整理頁面</div>';
            }
        }

        function displayOrders(orders) {
            const container = document.getElementById('orders-container');
            
            if (!orders || orders.length === 0) {
                container.innerHTML = '<div class="text-center text-muted py-4">暫無訂單資料</div>';
                return;
            }

            const orderHTML = orders.map(order => `
                <div class="order-item" data-order-id="${order.id}" onclick="selectOrder(${order.id})">
                    <div class="order-status status-${order.status}">
                        ${getStatusText(order.status)}
                    </div>
                    <div class="fw-bold">#${order.id} ${order.contact_name}</div>
                    <div class="small text-muted">
                        <i class="fas fa-phone"></i> ${order.contact_phone}
                    </div>
                    <div class="small text-muted">
                        <i class="fas fa-map-marker-alt"></i> ${order.address}
                    </div>
                    <div class="fw-bold text-success mt-2">NT$ ${order.total_amount}</div>
                    <div class="small text-muted">
                        ${new Date(order.created_at).toLocaleDateString('zh-TW')}
                    </div>
                </div>
            `).join('');

            container.innerHTML = orderHTML;
        }

        function updateOrderStats(orders) {
            document.getElementById('total-orders').textContent = orders.length;
            document.getElementById('ready-orders').textContent = 
                orders.filter(o => o.status === 'ready' || o.status === 'paid').length;
            document.getElementById('order-count').textContent = orders.length;
        }

        function getStatusText(status) {
            const statusMap = {
                'paid': '已付款',
                'ready': '待配送',
                'delivering': '配送中',
                'delivered': '已送達'
            };
            return statusMap[status] || status;
        }

        function selectOrder(orderId) {
            const orderElement = document.querySelector(`[data-order-id="${orderId}"]`);
            const isSelected = orderElement.classList.contains('selected');
            
            if (isSelected) {
                orderElement.classList.remove('selected');
                selectedOrders = selectedOrders.filter(id => id !== orderId);
            } else {
                orderElement.classList.add('selected');
                selectedOrders.push(orderId);
            }
            
            // 在地圖上高亮選中的訂單
            highlightOrderOnMap(orderId, !isSelected);
        }

        // ===== 路線優化 =====
        async function optimizeRoutes() {
            if (selectedOrders.length < 2) {
                alert('請至少選擇2個訂單進行路線優化');
                return;
            }

            const method = document.getElementById('optimization-method').value;
            const maxRoutes = parseInt(document.getElementById('max-routes').value);

            document.getElementById('route-loading').style.display = 'block';
            document.getElementById('optimization-result').style.display = 'none';

            try {
                const response = await fetch('/api/admin/route-optimization/generate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        orderIds: selectedOrders,
                        optimizationMethod: method,
                        maxClusters: maxRoutes
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    optimizedRoutes = result.routes;
                    displayOptimizationResult(result);
                    showRoutesOnMap(result.routes);
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                console.error('路線優化失敗:', error);
                alert('路線優化失敗: ' + error.message);
            } finally {
                document.getElementById('route-loading').style.display = 'none';
            }
        }

        function displayOptimizationResult(result) {
            const summary = document.getElementById('route-summary');
            const routesList = document.getElementById('routes-list');
            
            summary.innerHTML = `
                <div class="row">
                    <div class="col-6">
                        <div class="stat-card">
                            <div class="fw-bold text-primary">${result.overallStats.totalRoutes}</div>
                            <small>優化路線</small>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="stat-card">
                            <div class="fw-bold text-success">${result.overallStats.totalDistance} km</div>
                            <small>總距離</small>
                        </div>
                    </div>
                </div>
            `;

            const routesHTML = result.routes.map((route, index) => `
                <div class="route-item">
                    <div class="d-flex justify-content-between">
                        <strong>路線 ${index + 1}</strong>
                        <span class="badge bg-primary">${route.orders.length} 個訂單</span>
                    </div>
                    <div class="small text-muted mt-1">
                        距離: ${route.totalDistance.toFixed(1)} km | 
                        時間: ${route.estimatedTime.totalMinutes} 分鐘
                    </div>
                </div>
            `).join('');

            routesList.innerHTML = routesHTML;
            document.getElementById('optimization-result').style.display = 'block';
        }

        // ===== 地圖相關功能 =====
        function initMap() {
            map = new google.maps.Map(document.getElementById('delivery-map'), {
                center: { lat: 25.0330, lng: 121.5654 },
                zoom: 12,
                styles: [
                    {
                        featureType: 'water',
                        elementType: 'all',
                        stylers: [{ color: '#46bcec' }, { visibility: 'on' }]
                    }
                ]
            });
            
            // 載入初始地圖資料
            showAllOnMap();
        }

        function showAllOnMap() {
            clearMarkers();
            
            if (!currentOrders.length) return;
            
            const bounds = new google.maps.LatLngBounds();
            
            currentOrders.forEach(order => {
                if (order.lat && order.lng) {
                    const position = { lat: parseFloat(order.lat), lng: parseFloat(order.lng) };
                    bounds.extend(position);
                    
                    const marker = new google.maps.Marker({
                        position: position,
                        map: map,
                        title: `訂單 #${order.id}`,
                        icon: {
                            path: google.maps.SymbolPath.CIRCLE,
                            scale: 8,
                            fillColor: getStatusColor(order.status),
                            fillOpacity: 0.8,
                            strokeColor: '#ffffff',
                            strokeWeight: 2
                        }
                    });
                    
                    const infoWindow = new google.maps.InfoWindow({
                        content: `
                            <div style="max-width: 250px;">
                                <h6>訂單 #${order.id}</h6>
                                <p><strong>客戶:</strong> ${order.contact_name}</p>
                                <p><strong>電話:</strong> ${order.contact_phone}</p>
                                <p><strong>地址:</strong> ${order.address}</p>
                                <p><strong>金額:</strong> NT$ ${order.total_amount}</p>
                                <p><strong>狀態:</strong> ${getStatusText(order.status)}</p>
                            </div>
                        `
                    });
                    
                    marker.addListener('click', () => {
                        infoWindow.open(map, marker);
                    });
                    
                    markers.push(marker);
                }
            });
            
            if (markers.length > 0) {
                map.fitBounds(bounds);
            }
        }

        function highlightOrderOnMap(orderId, highlight) {
            const order = currentOrders.find(o => o.id === orderId);
            if (!order || !order.lat || !order.lng) return;
            
            const marker = markers.find(m => m.getTitle() === `訂單 #${orderId}`);
            if (marker) {
                marker.setIcon({
                    path: google.maps.SymbolPath.CIRCLE,
                    scale: highlight ? 12 : 8,
                    fillColor: highlight ? '#ffc107' : getStatusColor(order.status),
                    fillOpacity: 0.8,
                    strokeColor: '#ffffff',
                    strokeWeight: 2
                });
            }
        }

        function showRoutesOnMap(routes) {
            // 清除現有路線
            // 這裡會添加路線顯示邏輯
            console.log('顯示路線:', routes);
        }

        function getStatusColor(status) {
            const colors = {
                'paid': '#28a745',
                'ready': '#007bff',
                'delivering': '#ffc107',
                'delivered': '#6c757d'
            };
            return colors[status] || '#6c757d';
        }

        function clearMarkers() {
            markers.forEach(marker => marker.setMap(null));
            markers = [];
        }

        function refreshMap() {
            loadOrders();
            setTimeout(showAllOnMap, 500);
        }

        function clearMap() {
            clearMarkers();
        }

        // Google Maps API 初始化回調
        window.initMap = initMap;
    </script>
    
    <!-- Google Maps API -->
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=<%= googleMapsApiKey %>&callback=initMap"></script>
</body>
</html>