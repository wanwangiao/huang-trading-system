<!DOCTYPE html>
<html lang="zh-Hant">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>管理員｜WebSocket監控中心</title>
  <link rel="stylesheet" href="/css/admin-dashboard.css">
  <style>
    .monitor-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      margin-top: 20px;
    }
    
    .monitor-panel {
      background: white;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 15px;
      margin-bottom: 20px;
    }
    
    .stat-card {
      background: #f8f9fa;
      padding: 15px;
      border-radius: 8px;
      text-align: center;
    }
    
    .stat-value {
      font-size: 24px;
      font-weight: bold;
      color: #007bff;
    }
    
    .stat-label {
      font-size: 12px;
      color: #666;
      margin-top: 5px;
    }
    
    .connection-list {
      max-height: 300px;
      overflow-y: auto;
      border: 1px solid #e9ecef;
      border-radius: 4px;
    }
    
    .connection-item {
      padding: 10px;
      border-bottom: 1px solid #e9ecef;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .connection-item:last-child {
      border-bottom: none;
    }
    
    .connection-info {
      flex: 1;
    }
    
    .connection-id {
      font-family: monospace;
      font-size: 12px;
      color: #666;
    }
    
    .user-type {
      font-weight: bold;
      padding: 2px 6px;
      border-radius: 3px;
      font-size: 11px;
      color: white;
    }
    
    .user-type.admin { background: #dc3545; }
    .user-type.driver { background: #28a745; }
    .user-type.customer { background: #007bff; }
    .user-type.anonymous { background: #6c757d; }
    
    .room-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 10px;
    }
    
    .room-card {
      background: #f8f9fa;
      padding: 10px;
      border-radius: 4px;
      border-left: 4px solid #007bff;
    }
    
    .room-name {
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .room-count {
      font-size: 12px;
      color: #666;
    }
    
    .broadcast-panel {
      background: #fff3cd;
      border: 1px solid #ffeaa7;
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 20px;
    }
    
    .form-group {
      margin-bottom: 15px;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
    
    .form-group select,
    .form-group input,
    .form-group textarea {
      width: 100%;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    
    .btn {
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      margin-right: 10px;
    }
    
    .btn-primary { background: #007bff; color: white; }
    .btn-success { background: #28a745; color: white; }
    .btn-warning { background: #ffc107; color: #212529; }
    .btn-danger { background: #dc3545; color: white; }
    
    .status-indicator {
      display: inline-block;
      width: 8px;
      height: 8px;
      border-radius: 50%;
      margin-right: 5px;
    }
    
    .status-online { background: #28a745; }
    .status-offline { background: #dc3545; }
    
    .message-log {
      height: 200px;
      overflow-y: auto;
      border: 1px solid #e9ecef;
      border-radius: 4px;
      padding: 10px;
      background: #f8f9fa;
      font-family: monospace;
      font-size: 12px;
    }
    
    .log-entry {
      margin-bottom: 5px;
      padding: 2px 0;
    }
    
    .log-time {
      color: #666;
    }
    
    .log-type {
      font-weight: bold;
      margin: 0 5px;
    }
    
    .log-type.info { color: #007bff; }
    .log-type.warn { color: #ffc107; }
    .log-type.error { color: #dc3545; }
    .log-type.success { color: #28a745; }
  </style>
</head>
<body>
  <div class="admin-header">
    <h1>WebSocket監控中心</h1>
    <nav>
      <a href="/admin/dashboard">儀表板</a> |
      <a href="/admin/orders">訂單管理</a> |
      <a href="/admin/products">商品管理</a> |
      <a href="/admin/map">地圖視圖</a> |
      <a href="/admin/logout">登出</a>
    </nav>
  </div>

  <div class="container">
    <!-- WebSocket連接狀態 -->
    <div class="broadcast-panel">
      <h3>🔌 連接狀態</h3>
      <div id="connectionStatus">
        <span class="status-indicator status-offline"></span>
        未連接到WebSocket服務
      </div>
    </div>

    <!-- 統計數據 -->
    <div class="stats-grid">
      <div class="stat-card">
        <div class="stat-value" id="totalConnections">0</div>
        <div class="stat-label">總連接數</div>
      </div>
      <div class="stat-card">
        <div class="stat-value" id="adminConnections">0</div>
        <div class="stat-label">管理員連接</div>
      </div>
      <div class="stat-card">
        <div class="stat-value" id="driverConnections">0</div>
        <div class="stat-label">外送員連接</div>
      </div>
      <div class="stat-card">
        <div class="stat-value" id="customerConnections">0</div>
        <div class="stat-label">客戶連接</div>
      </div>
      <div class="stat-card">
        <div class="stat-value" id="totalRooms">0</div>
        <div class="stat-label">活躍房間</div>
      </div>
    </div>

    <div class="monitor-grid">
      <!-- 連接管理 -->
      <div class="monitor-panel">
        <h3>📱 活躍連接</h3>
        <div class="connection-list" id="connectionList">
          <div style="text-align: center; padding: 20px; color: #666;">
            載入中...
          </div>
        </div>
      </div>

      <!-- 房間管理 -->
      <div class="monitor-panel">
        <h3>🏠 房間狀態</h3>
        <div class="room-grid" id="roomGrid">
          <div style="text-align: center; padding: 20px; color: #666;">
            載入中...
          </div>
        </div>
      </div>
    </div>

    <!-- 廣播控制 -->
    <div class="monitor-panel" style="margin-top: 20px;">
      <h3>📢 系統廣播</h3>
      <div class="form-group">
        <label for="broadcastRoom">目標房間:</label>
        <select id="broadcastRoom">
          <option value="admin_global">管理員全域</option>
          <option value="drivers_global">外送員全域</option>
          <option value="system_monitoring">系統監控</option>
        </select>
      </div>
      <div class="form-group">
        <label for="broadcastMessage">廣播訊息:</label>
        <textarea id="broadcastMessage" rows="3" placeholder="輸入要廣播的訊息..."></textarea>
      </div>
      <div class="form-group">
        <label for="broadcastPriority">優先級:</label>
        <select id="broadcastPriority">
          <option value="low">低</option>
          <option value="normal" selected>一般</option>
          <option value="high">高</option>
          <option value="urgent">緊急</option>
        </select>
      </div>
      <button id="sendBroadcast" class="btn btn-primary">發送廣播</button>
      <button id="refreshStats" class="btn btn-success">刷新統計</button>
    </div>

    <!-- 訊息日誌 -->
    <div class="monitor-panel" style="margin-top: 20px;">
      <h3>📋 訊息日誌</h3>
      <div class="message-log" id="messageLog">
        <div class="log-entry">
          <span class="log-time">[載入中...]</span>
          <span class="log-type info">[INFO]</span>
          初始化監控中心...
        </div>
      </div>
      <button id="clearLog" class="btn btn-warning" style="margin-top: 10px;">清除日誌</button>
    </div>
  </div>

  <script src="/js/websocket-client.js"></script>
  <script>
    class WebSocketMonitor {
      constructor() {
        this.wsClient = new WebSocketClient();
        this.stats = {};
        this.connections = [];
        this.rooms = {};
        
        this.initializeElements();
        this.initializeWebSocket();
        this.initializeEventHandlers();
        
        this.log('info', '監控中心已啟動');
      }

      initializeElements() {
        this.connectionStatus = document.getElementById('connectionStatus');
        this.connectionList = document.getElementById('connectionList');
        this.roomGrid = document.getElementById('roomGrid');
        this.messageLog = document.getElementById('messageLog');
        this.broadcastRoom = document.getElementById('broadcastRoom');
        this.broadcastMessage = document.getElementById('broadcastMessage');
        this.broadcastPriority = document.getElementById('broadcastPriority');
        this.sendBroadcast = document.getElementById('sendBroadcast');
        this.refreshStats = document.getElementById('refreshStats');
        this.clearLog = document.getElementById('clearLog');

        // 統計元素
        this.totalConnections = document.getElementById('totalConnections');
        this.adminConnections = document.getElementById('adminConnections');
        this.driverConnections = document.getElementById('driverConnections');
        this.customerConnections = document.getElementById('customerConnections');
        this.totalRooms = document.getElementById('totalRooms');
      }

      initializeEventHandlers() {
        this.sendBroadcast.addEventListener('click', () => {
          this.sendBroadcastMessage();
        });

        this.refreshStats.addEventListener('click', () => {
          this.requestStats();
        });

        this.clearLog.addEventListener('click', () => {
          this.messageLog.innerHTML = '';
        });
      }

      async initializeWebSocket() {
        this.updateConnectionStatus('connecting', '正在連接WebSocket服務...');

        // 設定事件監聽
        this.wsClient.on('connected', () => {
          this.updateConnectionStatus('connected', '已連接到WebSocket服務');
          this.wsClient.authenticate('admin', 'monitor_admin');
        });

        this.wsClient.on('authenticated', () => {
          this.updateConnectionStatus('online', '管理員監控已上線');
          this.log('success', '身份驗證成功，開始監控');
          this.requestStats();
          this.startStatsPolling();
        });

        this.wsClient.on('disconnected', () => {
          this.updateConnectionStatus('offline', 'WebSocket連接已斷線');
          this.log('error', 'WebSocket連接斷線');
        });

        this.wsClient.on('broadcast_message', (data) => {
          this.log('info', `收到廣播 [${data.room}]: ${data.content}`);
        });

        this.wsClient.on('driver_location_update', (data) => {
          this.log('info', `外送員位置更新: driver_${data.driverId}`);
        });

        this.wsClient.on('server_error', (data) => {
          this.log('error', `伺服器錯誤: ${data.message}`);
        });

        // 連接WebSocket
        try {
          await this.wsClient.connect();
        } catch (error) {
          this.updateConnectionStatus('error', '連接失敗');
          this.log('error', `連接失敗: ${error.message}`);
        }
      }

      updateConnectionStatus(status, message) {
        const indicator = this.connectionStatus.querySelector('.status-indicator');
        indicator.className = `status-indicator status-${status === 'connected' || status === 'online' ? 'online' : 'offline'}`;
        this.connectionStatus.innerHTML = `<span class="status-indicator status-${status === 'connected' || status === 'online' ? 'online' : 'offline'}"></span>${message}`;
      }

      async requestStats() {
        try {
          const response = await fetch('/api/websocket/stats');
          const data = await response.json();
          
          if (data.success) {
            this.updateStats(data.stats);
            this.log('info', '統計數據已更新');
          }
        } catch (error) {
          this.log('error', `獲取統計失敗: ${error.message}`);
        }
      }

      updateStats(stats) {
        this.stats = stats;
        
        // 更新統計卡片
        this.totalConnections.textContent = stats.totalConnections || 0;
        this.adminConnections.textContent = stats.connectionsByType?.admin || 0;
        this.driverConnections.textContent = stats.connectionsByType?.driver || 0;
        this.customerConnections.textContent = stats.connectionsByType?.customer || 0;
        this.totalRooms.textContent = stats.totalRooms || 0;

        // 更新房間顯示
        this.updateRoomDisplay(stats.roomStats || {});
      }

      updateConnectionDisplay(connections) {
        if (!connections || connections.length === 0) {
          this.connectionList.innerHTML = '<div style="text-align: center; padding: 20px; color: #666;">暫無活躍連接</div>';
          return;
        }

        this.connectionList.innerHTML = connections.map(conn => `
          <div class="connection-item">
            <div class="connection-info">
              <div>
                <span class="user-type ${conn.userType || 'anonymous'}">${conn.userType || 'anonymous'}</span>
                ${conn.userId ? `用戶ID: ${conn.userId}` : '匿名用戶'}
              </div>
              <div class="connection-id">${conn.connectionId}</div>
            </div>
            <div>
              <span class="status-indicator status-online"></span>
              在線
            </div>
          </div>
        `).join('');
      }

      updateRoomDisplay(roomStats) {
        if (!roomStats || Object.keys(roomStats).length === 0) {
          this.roomGrid.innerHTML = '<div style="text-align: center; padding: 20px; color: #666;">暫無活躍房間</div>';
          return;
        }

        this.roomGrid.innerHTML = Object.entries(roomStats).map(([room, count]) => `
          <div class="room-card">
            <div class="room-name">${this.getRoomDisplayName(room)}</div>
            <div class="room-count">${count} 個連接</div>
          </div>
        `).join('');
      }

      getRoomDisplayName(room) {
        const displayNames = {
          'admin_global': '👥 管理員全域',
          'drivers_global': '🚚 外送員大廳',
          'system_monitoring': '🖥️ 系統監控',
        };
        return displayNames[room] || room;
      }

      sendBroadcastMessage() {
        const room = this.broadcastRoom.value;
        const message = this.broadcastMessage.value.trim();
        const priority = this.broadcastPriority.value;

        if (!message) {
          alert('請輸入廣播訊息');
          return;
        }

        if (this.wsClient.broadcast(room, message, priority)) {
          this.log('success', `廣播已發送到 ${room}: ${message}`);
          this.broadcastMessage.value = '';
        } else {
          this.log('error', '廣播發送失敗');
        }
      }

      startStatsPolling() {
        // 每30秒自動更新統計
        setInterval(() => {
          if (this.wsClient.isConnected) {
            this.requestStats();
          }
        }, 30000);
      }

      log(type, message) {
        const timestamp = new Date().toLocaleTimeString('zh-TW');
        const logEntry = document.createElement('div');
        logEntry.className = 'log-entry';
        logEntry.innerHTML = `
          <span class="log-time">[${timestamp}]</span>
          <span class="log-type ${type}">[${type.toUpperCase()}]</span>
          ${message}
        `;
        
        this.messageLog.appendChild(logEntry);
        this.messageLog.scrollTop = this.messageLog.scrollHeight;

        // 限制日誌條目數量
        const entries = this.messageLog.children;
        if (entries.length > 100) {
          this.messageLog.removeChild(entries[0]);
        }
      }
    }

    // 初始化監控中心
    document.addEventListener('DOMContentLoaded', () => {
      new WebSocketMonitor();
    });
  </script>
</body>
</html>