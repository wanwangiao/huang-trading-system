<!DOCTYPE html>
<html lang="zh-TW">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>LINE Bot 包裝完成通知測試</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Microsoft YaHei', Arial, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      color: #333;
    }
    
    .header {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      padding: 20px 0;
      box-shadow: 0 2px 20px rgba(0,0,0,0.1);
      margin-bottom: 30px;
    }
    
    .container {
      max-width: 800px;
      margin: 0 auto;
      padding: 0 20px;
    }
    
    h1 {
      text-align: center;
      color: #4a5568;
      font-size: 2.5em;
      margin-bottom: 10px;
    }
    
    .subtitle {
      text-align: center;
      color: #718096;
      font-size: 1.1em;
      margin-bottom: 20px;
    }
    
    .section {
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(10px);
      border-radius: 15px;
      padding: 30px;
      margin-bottom: 30px;
      box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
    }
    
    .section h2 {
      color: #2d3748;
      margin-bottom: 20px;
      font-size: 1.8em;
      border-bottom: 3px solid #4299e1;
      padding-bottom: 10px;
    }
    
    .status-flow {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 10px;
      margin: 20px 0;
    }
    
    .status-step {
      background: #f7fafc;
      border: 2px solid #e2e8f0;
      border-radius: 10px;
      padding: 15px;
      text-align: center;
      position: relative;
    }
    
    .status-step.active {
      background: #c6f6d5;
      border-color: #38a169;
    }
    
    .status-step.notify {
      background: #fef5e7;
      border-color: #d69e2e;
      position: relative;
    }
    
    .status-step.notify::after {
      content: '🔔';
      position: absolute;
      top: -10px;
      right: -10px;
      background: #d69e2e;
      color: white;
      border-radius: 50%;
      width: 25px;
      height: 25px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.8em;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 8px;
      font-weight: bold;
      color: #4a5568;
    }
    
    .form-control {
      width: 100%;
      padding: 12px;
      border: 2px solid #e2e8f0;
      border-radius: 8px;
      font-size: 1em;
      transition: border-color 0.3s ease;
    }
    
    .form-control:focus {
      outline: none;
      border-color: #4299e1;
    }
    
    .btn {
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      font-size: 1em;
      font-weight: bold;
      cursor: pointer;
      text-decoration: none;
      display: inline-block;
      transition: all 0.3s ease;
      margin: 5px;
    }
    
    .btn-primary { background: #4299e1; color: white; }
    .btn-success { background: #38a169; color: white; }
    .btn-warning { background: #d69e2e; color: white; }
    
    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    }
    
    .order-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 15px;
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      margin-bottom: 10px;
      transition: all 0.3s ease;
    }
    
    .order-item:hover {
      background-color: #f7fafc;
      border-color: #4299e1;
    }
    
    .order-info {
      flex-grow: 1;
    }
    
    .order-id {
      font-weight: bold;
      color: #2b6cb0;
    }
    
    .order-customer {
      color: #4a5568;
      font-size: 0.9em;
    }
    
    .order-status {
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 0.8em;
      font-weight: bold;
      margin: 0 10px;
    }
    
    .status-preparing { background: #fef5e7; color: #d69e2e; }
    .status-ready { background: #c6f6d5; color: #38a169; }
    .status-delivering { background: #bee3f8; color: #3182ce; }
    .status-completed { background: #d6f5d6; color: #22543d; }
    
    .log-area {
      background: #1a202c;
      color: #e2e8f0;
      padding: 20px;
      border-radius: 8px;
      font-family: 'Courier New', monospace;
      max-height: 300px;
      overflow-y: auto;
      white-space: pre-wrap;
    }
    
    .log-success { color: #68d391; }
    .log-warning { color: #fbb040; }
    .log-error { color: #fc8181; }
    
    .highlight-box {
      background: #fef5e7;
      border: 2px solid #d69e2e;
      border-radius: 10px;
      padding: 20px;
      margin: 20px 0;
    }
    
    .highlight-box h3 {
      color: #d69e2e;
      margin-bottom: 10px;
    }
  </style>
</head>
<body>
  <div class="header">
    <div class="container">
      <h1>📱 LINE Bot 包裝完成通知測試</h1>
      <p class="subtitle">測試訂單包裝完成時的自動 LINE 通知功能</p>
    </div>
  </div>

  <div class="container">
    <!-- 訂單狀態流程說明 -->
    <div class="section">
      <h2>📋 訂單狀態流程</h2>
      <div class="status-flow">
        <div class="status-step">
          <strong>準備中</strong><br>
          <small>preparing</small><br>
          <small>訂單進來時</small>
        </div>
        <div class="status-step notify">
          <strong>包裝完成</strong><br>
          <small>ready</small><br>
          <small>🔔 發送通知</small>
        </div>
        <div class="status-step">
          <strong>配送中</strong><br>
          <small>delivering</small><br>
          <small>開始配送</small>
        </div>
        <div class="status-step">
          <strong>已完成</strong><br>
          <small>completed</small><br>
          <small>訂單完成</small>
        </div>
      </div>
      
      <div class="highlight-box">
        <h3>🎯 重點功能</h3>
        <p>當訂單狀態從 <strong>準備中</strong> 更新為 <strong>包裝完成</strong> 時，系統會自動發送 LINE 通知給客戶，告知訂單已包裝完成並顯示總金額。</p>
      </div>
    </div>

    <!-- 測試操作 -->
    <div class="section">
      <h2>🧪 測試包裝完成通知</h2>
      
      <div class="form-group">
        <label>選擇測試訂單：</label>
        <select id="orderSelect" class="form-control">
          <option value="">載入訂單中...</option>
        </select>
      </div>
      
      <div class="form-group">
        <label>包裝完成備註：</label>
        <input type="text" id="notesInput" class="form-control" 
               placeholder="例如：商品已包裝完成，總重量確認完畢" 
               value="商品已包裝完成，準備配送">
      </div>
      
      <button onclick="markAsReady()" class="btn btn-success">📦 標記為包裝完成 (發送通知)</button>
      <button onclick="refreshOrders()" class="btn btn-warning">🔄 重新整理訂單</button>
    </div>

    <!-- 訂單列表 -->
    <div class="section">
      <h2>📋 準備中的訂單</h2>
      <div id="ordersList">載入中...</div>
    </div>

    <!-- 操作記錄 -->
    <div class="section">
      <h2>📝 操作記錄</h2>
      <div id="logArea" class="log-area">系統啟動，等待操作...</div>
      <button onclick="clearLog()" class="btn btn-warning">🗑️ 清除記錄</button>
    </div>

    <!-- LIFF 測試連結 -->
    <div class="section">
      <h2>🔗 LINE 整合測試</h2>
      <p><strong>LIFF 入口網址：</strong></p>
      <div class="highlight-box">
        <code id="liffUrl">載入中...</code><br><br>
        <button onclick="openLiffUrl()" class="btn btn-success">🔗 開啟 LIFF 頁面</button>
        <button onclick="copyLiffUrl()" class="btn btn-primary">📋 複製網址</button>
      </div>
      <p><small>💡 此網址用於設定 LINE Bot 的圖文選單連結</small></p>
    </div>
  </div>

  <script>
    let orders = [];

    // 頁面載入時初始化
    document.addEventListener('DOMContentLoaded', function() {
      loadOrders();
      updateLiffUrl();
      log('🚀 LINE Bot 測試系統已啟動');
    });

    // 載入訂單列表
    async function loadOrders() {
      try {
        const response = await fetch('/api/test/recent-orders');
        const data = await response.json();
        
        orders = data.orders || [];
        
        // 更新下拉選單
        const orderSelect = document.getElementById('orderSelect');
        orderSelect.innerHTML = '<option value="">請選擇訂單</option>';
        
        // 只顯示準備中的訂單
        const preparingOrders = orders.filter(order => order.status === 'preparing');
        
        preparingOrders.forEach(order => {
          const option = document.createElement('option');
          option.value = order.id;
          option.textContent = `#${order.id} - ${order.contact_name} - NT$ ${order.total_amount}`;
          orderSelect.appendChild(option);
        });
        
        // 更新訂單列表顯示
        updateOrdersList();
        
      } catch (error) {
        log('❌ 載入訂單失敗: ' + error.message, 'error');
      }
    }

    // 更新訂單列表顯示
    function updateOrdersList() {
      const container = document.getElementById('ordersList');
      
      // 只顯示準備中的訂單
      const preparingOrders = orders.filter(order => order.status === 'preparing');
      
      if (preparingOrders.length === 0) {
        container.innerHTML = '<div style="padding: 20px; text-align: center; color: #718096;">目前沒有準備中的訂單</div>';
        return;
      }
      
      container.innerHTML = '';
      
      preparingOrders.forEach(order => {
        const item = document.createElement('div');
        item.className = 'order-item';
        item.innerHTML = `
          <div class="order-info">
            <div class="order-id">#${order.id}</div>
            <div class="order-customer">${order.contact_name} - ${order.address}</div>
          </div>
          <div class="order-status status-${order.status}">準備中</div>
          <div style="font-weight: bold;">NT$ ${order.total_amount}</div>
          <button onclick="markOrderAsReady(${order.id})" class="btn btn-success" style="margin-left: 10px;">
            📦 包裝完成
          </button>
        `;
        
        container.appendChild(item);
      });
    }

    // 標記訂單為包裝完成
    async function markAsReady() {
      const orderId = document.getElementById('orderSelect').value;
      
      if (!orderId) {
        alert('請選擇訂單');
        return;
      }
      
      await markOrderAsReady(orderId);
    }

    // 標記指定訂單為包裝完成
    async function markOrderAsReady(orderId) {
      const notes = document.getElementById('notesInput').value || '商品已包裝完成';
      
      try {
        log(`📦 標記訂單 #${orderId} 為包裝完成...`);
        
        const response = await fetch(`/api/orders/${orderId}/status`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ 
            status: 'ready',
            notes: notes
          })
        });
        
        const result = await response.json();
        
        if (result.success) {
          log(`✅ 訂單 #${orderId} 已標記為包裝完成`, 'success');
          log(`📱 自動發送 LINE 通知給客戶`, 'success');
          
          // 重新載入訂單
          await loadOrders();
          
          // 清空選擇
          document.getElementById('orderSelect').value = '';
          
        } else {
          log(`❌ 標記失敗: ${result.message}`, 'error');
        }
        
      } catch (error) {
        log(`❌ 標記訂單包裝完成失敗: ${error.message}`, 'error');
      }
    }

    // 重新整理訂單
    function refreshOrders() {
      log('🔄 重新整理訂單列表...');
      loadOrders();
    }

    // 更新 LIFF URL
    function updateLiffUrl() {
      const currentDomain = window.location.origin;
      const liffUrl = `${currentDomain}/liff-entry`;
      document.getElementById('liffUrl').textContent = liffUrl;
    }

    // 開啟 LIFF 頁面
    function openLiffUrl() {
      const liffUrl = document.getElementById('liffUrl').textContent;
      window.open(liffUrl, '_blank');
    }

    // 複製 LIFF URL
    function copyLiffUrl() {
      const liffUrl = document.getElementById('liffUrl').textContent;
      navigator.clipboard.writeText(liffUrl).then(() => {
        log('📋 LIFF URL 已複製到剪貼簿', 'success');
      });
    }

    // 記錄訊息
    function log(message, type = 'info') {
      const logArea = document.getElementById('logArea');
      const timestamp = new Date().toLocaleTimeString();
      const className = type === 'success' ? 'log-success' : 
                       type === 'warning' ? 'log-warning' : 
                       type === 'error' ? 'log-error' : '';
      
      logArea.innerHTML += `<span class="${className}">[${timestamp}] ${message}</span>\n`;
      logArea.scrollTop = logArea.scrollHeight;
    }

    // 清除記錄
    function clearLog() {
      document.getElementById('logArea').innerHTML = '記錄已清除\n';
    }
  </script>
</body>
</html>