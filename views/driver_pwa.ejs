<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover">
    <title>承億蔬菜外送員</title>
    
    <!-- PWA Meta Tags -->
    <meta name="theme-color" content="#27ae60">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <meta name="apple-mobile-web-app-title" content="承億外送">
    <meta name="mobile-web-app-capable" content="yes">
    
    <!-- PWA Manifest -->
    <link rel="manifest" href="/manifest.json">
    
    <!-- App Icons -->
    <link rel="apple-touch-icon" href="/images/icon-152x152.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/images/icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/images/icon-180x180.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/images/icon-32x32.png">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            user-select: none;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);
            position: relative;
            overflow-x: hidden;
        }

        /* 頂部狀態欄 */
        .status-bar {
            background: rgba(39, 174, 96, 0.95);
            backdrop-filter: blur(10px);
            padding: 12px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 1000;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .driver-info h1 {
            font-size: 18px;
            color: white;
            font-weight: 600;
        }

        .driver-info p {
            font-size: 14px;
            color: rgba(255,255,255,0.9);
            margin-top: 2px;
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 8px;
            color: white;
            font-size: 14px;
            font-weight: 500;
        }

        .online-dot {
            width: 10px;
            height: 10px;
            background: #2ecc71;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.6; }
        }

        /* 主要內容區 */
        .main-content {
            padding: 20px;
            max-width: 600px;
            margin: 0 auto;
        }

        /* 統計卡片 */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 12px;
            margin-bottom: 24px;
        }

        .stat-card {
            background: white;
            border-radius: 16px;
            padding: 20px 16px;
            text-align: center;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            transition: transform 0.2s ease;
        }

        .stat-card:active {
            transform: scale(0.98);
        }

        .stat-icon {
            font-size: 24px;
            margin-bottom: 8px;
        }

        .stat-number {
            font-size: 24px;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 4px;
        }

        .stat-label {
            font-size: 12px;
            color: #7f8c8d;
            font-weight: 500;
        }

        /* 當前任務區 */
        .current-task {
            background: white;
            border-radius: 20px;
            padding: 24px;
            margin-bottom: 20px;
            box-shadow: 0 6px 30px rgba(0,0,0,0.1);
        }

        .task-header {
            display: flex;
            justify-content: between;
            align-items: center;
            margin-bottom: 16px;
        }

        .task-title {
            font-size: 18px;
            font-weight: 600;
            color: #2c3e50;
            flex: 1;
        }

        .task-status {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            color: white;
        }

        .status-assigned { background: #f39c12; }
        .status-picked-up { background: #3498db; }
        .status-delivering { background: #27ae60; }

        .task-details {
            margin-bottom: 20px;
        }

        .customer-info {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 12px;
        }

        .customer-name {
            font-size: 16px;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 4px;
        }

        .customer-phone {
            font-size: 14px;
            color: #7f8c8d;
            margin-bottom: 8px;
        }

        .customer-address {
            font-size: 14px;
            color: #34495e;
            line-height: 1.4;
        }

        /* 大型操作按鈕 */
        .action-buttons {
            display: flex;
            gap: 12px;
            margin-top: 20px;
        }

        .btn {
            flex: 1;
            padding: 16px;
            border: none;
            border-radius: 16px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            text-decoration: none;
            min-height: 56px;
        }

        .btn:active {
            transform: scale(0.98);
        }

        .btn-primary {
            background: #3498db;
            color: white;
            box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
        }

        .btn-success {
            background: #27ae60;
            color: white;
            box-shadow: 0 4px 15px rgba(39, 174, 96, 0.3);
        }

        .btn-warning {
            background: #f39c12;
            color: white;
            box-shadow: 0 4px 15px rgba(243, 156, 18, 0.3);
        }

        .btn-navigate {
            background: #e74c3c;
            color: white;
            box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
        }

        /* 訂單列表 */
        .order-list {
            background: white;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }

        .list-header {
            background: #34495e;
            color: white;
            padding: 16px 20px;
            font-size: 16px;
            font-weight: 600;
        }

        .order-item {
            padding: 20px;
            border-bottom: 1px solid #ecf0f1;
            transition: background-color 0.2s ease;
        }

        .order-item:last-child {
            border-bottom: none;
        }

        .order-item:active {
            background-color: #f8f9fa;
        }

        .order-summary {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 12px;
        }

        .order-info h4 {
            font-size: 16px;
            color: #2c3e50;
            margin-bottom: 4px;
        }

        .order-info p {
            font-size: 14px;
            color: #7f8c8d;
        }

        .order-value {
            font-size: 18px;
            font-weight: 700;
            color: #27ae60;
        }

        /* 空狀態 */
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #7f8c8d;
        }

        .empty-state-icon {
            font-size: 48px;
            margin-bottom: 16px;
        }

        /* 浮動通知 */
        .toast {
            position: fixed;
            top: 70px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 12px 20px;
            border-radius: 25px;
            font-size: 14px;
            z-index: 2000;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .toast.show {
            opacity: 1;
        }

        /* 底部導航 */
        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: white;
            padding: 12px;
            padding-bottom: calc(12px + env(safe-area-inset-bottom));
            box-shadow: 0 -2px 20px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-around;
        }

        .nav-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 8px;
            text-decoration: none;
            color: #7f8c8d;
            font-size: 12px;
            transition: color 0.2s ease;
        }

        .nav-item.active {
            color: #27ae60;
        }

        .nav-icon {
            font-size: 20px;
            margin-bottom: 4px;
        }

        /* 響應式調整 */
        @media (max-width: 480px) {
            .main-content {
                padding: 16px;
            }
            
            .stats-grid {
                gap: 8px;
            }
            
            .stat-card {
                padding: 16px 12px;
            }
        }

        /* 深色模式支援 */
        @media (prefers-color-scheme: dark) {
            body {
                background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            }
        }

        /* 載入動畫 */
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 40px;
        }

        .spinner {
            width: 30px;
            height: 30px;
            border: 3px solid #ecf0f1;
            border-top: 3px solid #27ae60;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <!-- 狀態欄 -->
    <div class="status-bar">
        <div class="driver-info">
            <h1>🥬 承億蔬菜外送</h1>
            <p>外送員：<span id="driver-name">載入中...</span></p>
        </div>
        <div class="status-indicator">
            <div class="online-dot"></div>
            <span>線上</span>
        </div>
    </div>

    <!-- 主要內容 -->
    <div class="main-content">
        <!-- 統計卡片 -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-icon">✅</div>
                <div class="stat-number" id="completed-count">0</div>
                <div class="stat-label">今日完成</div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">🚚</div>
                <div class="stat-number" id="active-count">0</div>
                <div class="stat-label">進行中</div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">💰</div>
                <div class="stat-number" id="earnings">$0</div>
                <div class="stat-label">今日收入</div>
            </div>
        </div>

        <!-- 當前任務 -->
        <div id="current-task" class="current-task" style="display: none;">
            <!-- 動態載入當前任務 -->
        </div>

        <!-- 待配送訂單 -->
        <div class="order-list">
            <div class="list-header">
                📦 待配送訂單
            </div>
            <div id="pending-orders">
                <div class="loading">
                    <div class="spinner"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- 底部導航 -->
    <div class="bottom-nav">
        <a href="#" class="nav-item active" data-tab="orders">
            <div class="nav-icon">📦</div>
            <span>訂單</span>
        </a>
        <a href="#" class="nav-item" data-tab="map">
            <div class="nav-icon">🗺️</div>
            <span>地圖</span>
        </a>
        <a href="#" class="nav-item" data-tab="stats">
            <div class="nav-icon">📊</div>
            <span>統計</span>
        </a>
        <a href="#" class="nav-item" data-tab="profile">
            <div class="nav-icon">👤</div>
            <span>我的</span>
        </a>
    </div>

    <!-- 浮動通知 -->
    <div id="toast" class="toast"></div>

    <script>
        // PWA 安裝和 Service Worker 註冊
        let deferredPrompt;
        let currentRoute = [];
        let currentOrderIndex = 0;

        // 註冊 Service Worker
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', function() {
                navigator.serviceWorker.register('/sw.js')
                    .then(function(registration) {
                        console.log('✅ SW 註冊成功:', registration.scope);
                    })
                    .catch(function(error) {
                        console.log('❌ SW 註冊失敗:', error);
                    });
            });
        }

        // PWA 安裝提示
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            deferredPrompt = e;
            // 可以在這裡顯示自定義安裝按鈕
        });

        // 頁面載入完成
        document.addEventListener('DOMContentLoaded', function() {
            loadDriverInfo();
            loadTodayStats();
            loadCurrentTask();
            loadPendingOrders();
            
            // 每30秒刷新數據
            setInterval(() => {
                loadTodayStats();
                loadCurrentTask();
                loadPendingOrders();
            }, 30000);
        });

        // 載入外送員資訊
        async function loadDriverInfo() {
            try {
                // 這裡應該從 session 或 API 獲取外送員資訊
                document.getElementById('driver-name').textContent = '王大明';
            } catch (error) {
                console.error('載入外送員資訊失敗:', error);
            }
        }

        // 載入今日統計
        async function loadTodayStats() {
            try {
                const response = await fetch('/api/driver/today-stats');
                const stats = await response.json();
                
                document.getElementById('completed-count').textContent = stats.completed || 0;
                document.getElementById('active-count').textContent = stats.active || 0;
                document.getElementById('earnings').textContent = `$${stats.earnings || 0}`;
            } catch (error) {
                console.error('載入統計失敗:', error);
            }
        }

        // 載入當前任務
        async function loadCurrentTask() {
            try {
                const response = await fetch('/api/driver/current-task');
                const task = await response.json();
                
                const container = document.getElementById('current-task');
                
                if (task && task.id) {
                    container.style.display = 'block';
                    container.innerHTML = createCurrentTaskHTML(task);
                } else {
                    container.style.display = 'none';
                }
            } catch (error) {
                console.error('載入當前任務失敗:', error);
            }
        }

        // 創建當前任務HTML
        function createCurrentTaskHTML(task) {
            const statusMap = {
                'assigned': { text: '已指派', class: 'status-assigned' },
                'picked_up': { text: '已取貨', class: 'status-picked-up' },
                'delivering': { text: '配送中', class: 'status-delivering' }
            };
            
            const status = statusMap[task.status] || { text: '未知', class: '' };
            
            return `
                <div class="task-header">
                    <div class="task-title">📍 當前任務</div>
                    <span class="task-status ${status.class}">${status.text}</span>
                </div>
                <div class="task-details">
                    <div class="customer-info">
                        <div class="customer-name">${task.contact_name}</div>
                        <div class="customer-phone">📞 ${task.contact_phone}</div>
                        <div class="customer-address">📍 ${task.address}</div>
                    </div>
                </div>
                <div class="action-buttons">
                    ${createTaskActionButtons(task)}
                </div>
            `;
        }

        // 創建任務操作按鈕
        function createTaskActionButtons(task) {
            switch (task.status) {
                case 'assigned':
                    return `
                        <button class="btn btn-success" onclick="pickupOrder(${task.id})">
                            📦 確認取貨
                        </button>
                        <button class="btn btn-navigate" onclick="navigateToCustomer(${task.lat}, ${task.lng})">
                            🗺️ 導航
                        </button>
                    `;
                case 'picked_up':
                    return `
                        <button class="btn btn-primary" onclick="startDelivery(${task.id})">
                            🚚 開始配送
                        </button>
                        <button class="btn btn-navigate" onclick="navigateToCustomer(${task.lat}, ${task.lng})">
                            🗺️ 導航
                        </button>
                    `;
                case 'delivering':
                    return `
                        <button class="btn btn-success" onclick="completeDeliveryWithNavigation(${task.id})">
                            ✅ 完成配送
                        </button>
                        <button class="btn btn-navigate" onclick="navigateToCustomer(${task.lat}, ${task.lng})">
                            🗺️ 重新導航
                        </button>
                    `;
                default:
                    return '';
            }
        }

        // 載入待配送訂單
        async function loadPendingOrders() {
            try {
                const response = await fetch('/api/driver/pending-orders');
                const orders = await response.json();
                
                const container = document.getElementById('pending-orders');
                
                if (orders.length === 0) {
                    container.innerHTML = `
                        <div class="empty-state">
                            <div class="empty-state-icon">📭</div>
                            <p>目前沒有待配送訂單</p>
                        </div>
                    `;
                } else {
                    container.innerHTML = orders.map(order => `
                        <div class="order-item" onclick="selectOrder(${order.id})">
                            <div class="order-summary">
                                <div class="order-info">
                                    <h4>${order.contact_name}</h4>
                                    <p>📍 ${order.address}</p>
                                </div>
                                <div class="order-value">$${order.total_amount}</div>
                            </div>
                        </div>
                    `).join('');
                }
            } catch (error) {
                console.error('載入待配送訂單失敗:', error);
                document.getElementById('pending-orders').innerHTML = `
                    <div class="empty-state">
                        <div class="empty-state-icon">❌</div>
                        <p>載入失敗，請重試</p>
                    </div>
                `;
            }
        }

        // 🚀 關鍵功能：完成配送並自動導航下一個
        async function completeDeliveryWithNavigation(orderId) {
            try {
                showToast('正在完成配送...');
                
                // 1. 完成當前配送
                const response = await fetch(`/api/driver/complete-delivery/${orderId}`, {
                    method: 'POST'
                });
                
                if (!response.ok) {
                    throw new Error('完成配送失敗');
                }
                
                showToast('✅ 配送完成！', 'success');
                
                // 2. 獲取優化路線中的下一個訂單
                const nextOrder = await getNextOrderInRoute(orderId);
                
                if (nextOrder) {
                    // 3. 自動開始下一個訂單的導航
                    setTimeout(() => {
                        showToast('🗺️ 正在開啟下一個訂單導航...');
                        navigateToCustomer(nextOrder.lat, nextOrder.lng, nextOrder.contact_name);
                    }, 1000);
                } else {
                    // 4. 如果沒有下一個訂單，導航回配送中心
                    setTimeout(() => {
                        showToast('🏠 正在導航回配送中心...');
                        navigateToDepot();
                    }, 1000);
                }
                
                // 5. 刷新數據
                loadTodayStats();
                loadCurrentTask();
                loadPendingOrders();
                
            } catch (error) {
                console.error('完成配送失敗:', error);
                showToast('❌ 完成配送失敗', 'error');
            }
        }

        // 獲取路線中的下一個訂單
        async function getNextOrderInRoute(completedOrderId) {
            try {
                const response = await fetch(`/api/driver/next-order/${completedOrderId}`);
                if (response.ok) {
                    return await response.json();
                }
                return null;
            } catch (error) {
                console.error('獲取下一個訂單失敗:', error);
                return null;
            }
        }

        // 導航到客戶位置
        function navigateToCustomer(lat, lng, customerName = '') {
            const destination = `${lat},${lng}`;
            const mapsUrl = `https://www.google.com/maps/dir/?api=1&destination=${destination}&travelmode=driving`;
            
            // 在PWA中，這會直接開啟Google Maps應用
            window.open(mapsUrl, '_blank');
            
            if (customerName) {
                showToast(`🗺️ 正在導航至 ${customerName}`, 'info');
            }
        }

        // 導航回配送中心
        function navigateToDepot() {
            const depotLat = 25.0330;
            const depotLng = 121.5654;
            navigateToCustomer(depotLat, depotLng, '配送中心');
        }

        // 其他配送操作
        async function pickupOrder(orderId) {
            try {
                const response = await fetch(`/api/driver/pickup-order/${orderId}`, {
                    method: 'POST'
                });
                
                if (response.ok) {
                    showToast('✅ 已確認取貨');
                    loadCurrentTask();
                } else {
                    showToast('❌ 取貨確認失敗', 'error');
                }
            } catch (error) {
                console.error('取貨失敗:', error);
                showToast('❌ 取貨確認失敗', 'error');
            }
        }

        async function startDelivery(orderId) {
            try {
                const response = await fetch(`/api/driver/start-delivery/${orderId}`, {
                    method: 'POST'
                });
                
                if (response.ok) {
                    showToast('✅ 開始配送');
                    loadCurrentTask();
                } else {
                    showToast('❌ 開始配送失敗', 'error');
                }
            } catch (error) {
                console.error('開始配送失敗:', error);
                showToast('❌ 開始配送失敗', 'error');
            }
        }

        // 顯示通知
        function showToast(message, type = 'info') {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.className = `toast show ${type}`;
            
            setTimeout(() => {
                toast.className = 'toast';
            }, 3000);
        }

        // 底部導航切換
        document.querySelectorAll('.nav-item').forEach(item => {
            item.addEventListener('click', function(e) {
                e.preventDefault();
                
                // 移除所有active類
                document.querySelectorAll('.nav-item').forEach(nav => nav.classList.remove('active'));
                
                // 添加active類到當前項
                this.classList.add('active');
                
                // 根據選中的標籤顯示不同內容
                const tab = this.dataset.tab;
                handleTabSwitch(tab);
            });
        });

        function handleTabSwitch(tab) {
            switch (tab) {
                case 'orders':
                    // 已經是默認顯示
                    break;
                case 'map':
                    // 顯示地圖視圖
                    break;
                case 'stats':
                    // 顯示統計視圖
                    break;
                case 'profile':
                    // 顯示個人檔案
                    break;
            }
        }

        // 防止頁面意外重新載入
        window.addEventListener('beforeunload', function(e) {
            if (document.getElementById('current-task').style.display !== 'none') {
                e.preventDefault();
                e.returnValue = '';
            }
        });

        // 處理頁面可見性變化（切換APP時）
        document.addEventListener('visibilitychange', function() {
            if (!document.hidden) {
                // 頁面重新可見時刷新數據
                loadCurrentTask();
                loadPendingOrders();
            }
        });
    </script>
</body>
</html>