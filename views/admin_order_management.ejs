<!DOCTYPE html>
<html lang="zh-TW">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>訂單管理 - 承億蔬菜外送後台</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Microsoft YaHei', Arial, sans-serif;
      background: #f8fafc;
      color: #2d3748;
    }
    
    .header {
      background: #2d3748;
      color: white;
      padding: 20px 0;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .header h1 {
      text-align: center;
      font-size: 2em;
    }
    
    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
    }
    
    .controls-section {
      background: white;
      border-radius: 10px;
      padding: 20px;
      margin-bottom: 20px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .search-bar {
      display: flex;
      gap: 15px;
      align-items: center;
      flex-wrap: wrap;
    }
    
    .search-group {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .search-group label {
      font-weight: bold;
      color: #4a5568;
      white-space: nowrap;
    }
    
    .form-control {
      padding: 10px;
      border: 2px solid #e2e8f0;
      border-radius: 6px;
      font-size: 1em;
      transition: border-color 0.3s ease;
    }
    
    .form-control:focus {
      outline: none;
      border-color: #4299e1;
    }
    
    .btn {
      padding: 10px 20px;
      border: none;
      border-radius: 6px;
      font-size: 1em;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .btn-primary { background: #4299e1; color: white; }
    .btn-success { background: #48bb78; color: white; }
    .btn-warning { background: #ed8936; color: white; }
    .btn-danger { background: #f56565; color: white; }
    
    .btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    }
    
    .orders-section {
      background: white;
      border-radius: 10px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    
    .section-header {
      background: #4a5568;
      color: white;
      padding: 15px 20px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .orders-table {
      width: 100%;
      border-collapse: collapse;
    }
    
    .orders-table th,
    .orders-table td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #e2e8f0;
    }
    
    .orders-table th {
      background: #f7fafc;
      font-weight: bold;
      color: #4a5568;
      position: sticky;
      top: 0;
    }
    
    .orders-table tr:hover {
      background: #f7fafc;
    }
    
    .order-status {
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 0.8em;
      font-weight: bold;
      text-align: center;
      white-space: nowrap;
    }
    
    .status-preparing { background: #fef5e7; color: #d69e2e; }
    .status-ready { background: #c6f6d5; color: #38a169; }
    .status-delivering { background: #bee3f8; color: #3182ce; }
    .status-completed { background: #d6f5d6; color: #22543d; }
    
    .action-buttons {
      display: flex;
      gap: 5px;
    }
    
    .btn-sm {
      padding: 5px 10px;
      font-size: 0.8em;
    }
    
    .modal {
      display: none;
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.5);
    }
    
    .modal-content {
      background-color: white;
      margin: 5% auto;
      padding: 30px;
      border-radius: 10px;
      width: 80%;
      max-width: 800px;
      max-height: 80vh;
      overflow-y: auto;
    }
    
    .modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      padding-bottom: 10px;
      border-bottom: 2px solid #e2e8f0;
    }
    
    .close {
      color: #aaa;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
    }
    
    .close:hover {
      color: #000;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
      color: #4a5568;
    }
    
    .items-list {
      border: 1px solid #e2e8f0;
      border-radius: 6px;
      max-height: 200px;
      overflow-y: auto;
    }
    
    .item-row {
      display: flex;
      align-items: center;
      padding: 10px;
      border-bottom: 1px solid #e2e8f0;
      gap: 10px;
    }
    
    .item-row:last-child {
      border-bottom: none;
    }
    
    .item-info {
      flex-grow: 1;
    }
    
    .item-name {
      font-weight: bold;
      color: #2d3748;
    }
    
    .item-details {
      color: #718096;
      font-size: 0.9em;
    }
    
    .price-input {
      width: 100px;
      text-align: right;
    }
    
    .loading {
      text-align: center;
      padding: 40px;
      color: #718096;
    }
    
    .empty-state {
      text-align: center;
      padding: 60px 20px;
      color: #718096;
    }
    
    .stats-bar {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      flex-wrap: wrap;
    }
    
    .stat-item {
      background: white;
      border-radius: 8px;
      padding: 15px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      text-align: center;
      flex: 1;
      min-width: 120px;
    }
    
    .stat-number {
      font-size: 1.8em;
      font-weight: bold;
      color: #2d3748;
    }
    
    .stat-label {
      color: #718096;
      font-size: 0.9em;
    }
    
    @media (max-width: 768px) {
      .search-bar {
        flex-direction: column;
        align-items: stretch;
      }
      
      .search-group {
        flex-direction: column;
        align-items: stretch;
      }
      
      .orders-table {
        font-size: 0.9em;
      }
      
      .modal-content {
        width: 95%;
        margin: 2% auto;
        padding: 20px;
      }
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>📋 訂單管理系統</h1>
  </div>

  <div class="container">
    <!-- 統計資訊 -->
    <div class="stats-bar" id="statsBar">
      <div class="stat-item">
        <div class="stat-number" id="totalOrders">-</div>
        <div class="stat-label">總訂單</div>
      </div>
      <div class="stat-item">
        <div class="stat-number" id="preparingCount">-</div>
        <div class="stat-label">準備中</div>
      </div>
      <div class="stat-item">
        <div class="stat-number" id="readyCount">-</div>
        <div class="stat-label">包裝完成</div>
      </div>
      <div class="stat-item">
        <div class="stat-number" id="deliveringCount">-</div>
        <div class="stat-label">配送中</div>
      </div>
      <div class="stat-item">
        <div class="stat-number" id="completedCount">-</div>
        <div class="stat-label">已完成</div>
      </div>
    </div>

    <!-- 搜尋控制區 -->
    <div class="controls-section">
      <div class="search-bar">
        <div class="search-group">
          <label>🔍 顧客姓名：</label>
          <input type="text" id="customerSearch" class="form-control" placeholder="輸入顧客姓名搜尋..." style="width: 200px;">
        </div>
        
        <div class="search-group">
          <label>📋 訂單狀態：</label>
          <select id="statusFilter" class="form-control" style="width: 150px;">
            <option value="">全部狀態</option>
            <option value="preparing">準備中</option>
            <option value="ready">包裝完成</option>
            <option value="delivering">配送中</option>
            <option value="completed">已完成</option>
          </select>
        </div>
        
        <div class="search-group">
          <label>📅 日期範圍：</label>
          <input type="date" id="dateFrom" class="form-control">
          <span>至</span>
          <input type="date" id="dateTo" class="form-control">
        </div>
        
        <button onclick="searchOrders()" class="btn btn-primary">🔍 搜尋</button>
        <button onclick="clearSearch()" class="btn btn-warning">🗑️ 清除</button>
        <button onclick="refreshOrders()" class="btn btn-success">🔄 重新整理</button>
      </div>
    </div>

    <!-- 訂單列表 -->
    <div class="orders-section">
      <div class="section-header">
        <h3>📦 訂單列表</h3>
        <span id="orderCount">載入中...</span>
      </div>
      
      <div style="overflow-x: auto;">
        <table class="orders-table">
          <thead>
            <tr>
              <th>訂單編號</th>
              <th>顧客姓名</th>
              <th>聯絡電話</th>
              <th>配送地址</th>
              <th>訂單金額</th>
              <th>訂單狀態</th>
              <th>建立時間</th>
              <th>操作</th>
            </tr>
          </thead>
          <tbody id="ordersTableBody">
            <tr>
              <td colspan="8" class="loading">
                <div>📦 載入訂單中...</div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- 編輯訂單 Modal -->
  <div id="editOrderModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>✏️ 編輯訂單</h2>
        <span class="close" onclick="closeEditModal()">&times;</span>
      </div>
      
      <form id="editOrderForm">
        <div class="form-group">
          <label>📦 訂單編號：</label>
          <input type="text" id="editOrderId" class="form-control" readonly>
        </div>
        
        <div class="form-group">
          <label>👤 顧客姓名：</label>
          <input type="text" id="editCustomerName" class="form-control">
        </div>
        
        <div class="form-group">
          <label>📞 聯絡電話：</label>
          <input type="text" id="editCustomerPhone" class="form-control">
        </div>
        
        <div class="form-group">
          <label>📍 配送地址：</label>
          <textarea id="editAddress" class="form-control" rows="2"></textarea>
        </div>
        
        <div class="form-group">
          <label>📋 訂單狀態：</label>
          <select id="editStatus" class="form-control">
            <option value="preparing">準備中</option>
            <option value="ready">包裝完成</option>
            <option value="delivering">配送中</option>
            <option value="completed">已完成</option>
          </select>
        </div>
        
        <div class="form-group">
          <label>📝 備註：</label>
          <textarea id="editNotes" class="form-control" rows="2" placeholder="訂單備註..."></textarea>
        </div>
        
        <div class="form-group">
          <label>🛒 商品明細：</label>
          <div id="editItemsList" class="items-list">
            載入中...
          </div>
        </div>
        
        <div class="form-group">
          <label>💰 訂單總額：</label>
          <input type="number" id="editTotalAmount" class="form-control" step="0.01" readonly>
        </div>
        
        <div style="text-align: center; margin-top: 30px;">
          <button type="button" onclick="saveOrderChanges()" class="btn btn-success">💾 儲存變更</button>
          <button type="button" onclick="closeEditModal()" class="btn btn-warning">❌ 取消</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    let orders = [];
    let filteredOrders = [];
    let currentEditOrderId = null;

    // 頁面載入時初始化
    document.addEventListener('DOMContentLoaded', function() {
      loadOrders();
      
      // 設定今天為預設日期範圍
      const today = new Date().toISOString().split('T')[0];
      document.getElementById('dateTo').value = today;
      
      // 設定一週前為起始日期
      const weekAgo = new Date();
      weekAgo.setDate(weekAgo.getDate() - 7);
      document.getElementById('dateFrom').value = weekAgo.toISOString().split('T')[0];
      
      // 綁定即時搜尋
      document.getElementById('customerSearch').addEventListener('input', searchOrders);
      document.getElementById('statusFilter').addEventListener('change', searchOrders);
    });

    // 載入訂單列表
    async function loadOrders() {
      try {
        showLoading();
        
        const response = await fetch('/api/admin/orders-list');
        const data = await response.json();
        
        if (data.success) {
          orders = data.orders || [];
          filteredOrders = [...orders];
          updateOrdersDisplay();
          updateStats();
        } else {
          showError('載入訂單失敗: ' + data.message);
        }
        
      } catch (error) {
        console.error('載入訂單錯誤:', error);
        showError('載入訂單時發生錯誤');
      }
    }

    // 搜尋訂單
    function searchOrders() {
      const customerName = document.getElementById('customerSearch').value.toLowerCase().trim();
      const statusFilter = document.getElementById('statusFilter').value;
      const dateFrom = document.getElementById('dateFrom').value;
      const dateTo = document.getElementById('dateTo').value;
      
      filteredOrders = orders.filter(order => {
        // 顧客姓名搜尋
        const nameMatch = !customerName || 
          order.contact_name.toLowerCase().includes(customerName);
        
        // 狀態篩選
        const statusMatch = !statusFilter || order.status === statusFilter;
        
        // 日期範圍篩選
        let dateMatch = true;
        if (dateFrom || dateTo) {
          const orderDate = new Date(order.created_at).toISOString().split('T')[0];
          
          if (dateFrom && orderDate < dateFrom) dateMatch = false;
          if (dateTo && orderDate > dateTo) dateMatch = false;
        }
        
        return nameMatch && statusMatch && dateMatch;
      });
      
      updateOrdersDisplay();
      updateStats();
    }

    // 清除搜尋條件
    function clearSearch() {
      document.getElementById('customerSearch').value = '';
      document.getElementById('statusFilter').value = '';
      document.getElementById('dateFrom').value = '';
      document.getElementById('dateTo').value = '';
      
      filteredOrders = [...orders];
      updateOrdersDisplay();
      updateStats();
    }

    // 重新整理訂單
    function refreshOrders() {
      loadOrders();
    }

    // 更新訂單顯示
    function updateOrdersDisplay() {
      const tbody = document.getElementById('ordersTableBody');
      
      if (filteredOrders.length === 0) {
        tbody.innerHTML = `
          <tr>
            <td colspan="8" class="empty-state">
              <div>📭 沒有找到符合條件的訂單</div>
            </td>
          </tr>
        `;
        return;
      }
      
      tbody.innerHTML = filteredOrders.map(order => `
        <tr>
          <td><strong>#${order.id}</strong></td>
          <td>${order.contact_name}</td>
          <td>${order.contact_phone}</td>
          <td title="${order.address}">${truncateText(order.address, 30)}</td>
          <td><strong>NT$ ${order.total_amount}</strong></td>
          <td>
            <span class="order-status status-${order.status}">
              ${getStatusText(order.status)}
            </span>
          </td>
          <td>${formatDate(order.created_at)}</td>
          <td>
            <div class="action-buttons">
              <button onclick="editOrder(${order.id})" class="btn btn-primary btn-sm">✏️ 編輯</button>
              <button onclick="updateOrderStatus(${order.id})" class="btn btn-success btn-sm">📋 更新狀態</button>
            </div>
          </td>
        </tr>
      `).join('');
      
      document.getElementById('orderCount').textContent = `共 ${filteredOrders.length} 筆訂單`;
    }

    // 更新統計資訊
    function updateStats() {
      const stats = {
        total: filteredOrders.length,
        preparing: filteredOrders.filter(o => o.status === 'preparing').length,
        ready: filteredOrders.filter(o => o.status === 'ready').length,
        delivering: filteredOrders.filter(o => o.status === 'delivering').length,
        completed: filteredOrders.filter(o => o.status === 'completed').length
      };
      
      document.getElementById('totalOrders').textContent = stats.total;
      document.getElementById('preparingCount').textContent = stats.preparing;
      document.getElementById('readyCount').textContent = stats.ready;
      document.getElementById('deliveringCount').textContent = stats.delivering;
      document.getElementById('completedCount').textContent = stats.completed;
    }

    // 編輯訂單
    async function editOrder(orderId) {
      try {
        currentEditOrderId = orderId;
        
        // 載入訂單詳細資料
        const response = await fetch(`/api/admin/orders/${orderId}/details`);
        const data = await response.json();
        
        if (data.success) {
          const order = data.order;
          const items = data.items;
          
          // 填入表單
          document.getElementById('editOrderId').value = order.id;
          document.getElementById('editCustomerName').value = order.contact_name;
          document.getElementById('editCustomerPhone').value = order.contact_phone;
          document.getElementById('editAddress').value = order.address;
          document.getElementById('editStatus').value = order.status;
          document.getElementById('editNotes').value = order.notes || '';
          document.getElementById('editTotalAmount').value = order.total_amount;
          
          // 顯示商品明細
          displayOrderItems(items);
          
          // 顯示 Modal
          document.getElementById('editOrderModal').style.display = 'block';
          
        } else {
          alert('載入訂單詳情失敗: ' + data.message);
        }
        
      } catch (error) {
        console.error('編輯訂單錯誤:', error);
        alert('載入訂單詳情時發生錯誤');
      }
    }

    // 顯示訂單商品明細
    function displayOrderItems(items) {
      const container = document.getElementById('editItemsList');
      
      if (!items || items.length === 0) {
        container.innerHTML = '<div style="padding: 20px; text-align: center;">沒有商品明細</div>';
        return;
      }
      
      container.innerHTML = items.map((item, index) => `
        <div class="item-row">
          <div class="item-info">
            <div class="item-name">${item.name}</div>
            <div class="item-details">
              數量: ${item.quantity} | 
              ${item.is_priced_item ? '秤重商品' : '固定價格'}
              ${item.actual_weight ? ` | 重量: ${item.actual_weight}kg` : ''}
            </div>
          </div>
          <div style="display: flex; align-items: center; gap: 10px;">
            <span>NT$</span>
            <input type="number" 
                   class="form-control price-input" 
                   step="0.01" 
                   value="${item.unit_price}"
                   onchange="updateItemPrice(${index}, this.value)"
                   ${item.is_priced_item ? '' : 'readonly'}
                   style="background: ${item.is_priced_item ? '#fff' : '#f7fafc'}">
            <span>× ${item.quantity} = NT$ <span id="lineTotal${index}">${item.line_total}</span></span>
          </div>
        </div>
      `).join('');
    }

    // 更新商品單價
    function updateItemPrice(itemIndex, newPrice) {
      // 這裡可以即時計算新的小計和總計
      // 暫時先更新顯示，實際儲存時會重新計算
      const items = getCurrentOrderItems();
      if (items[itemIndex]) {
        const lineTotal = parseFloat(newPrice) * items[itemIndex].quantity;
        document.getElementById(`lineTotal${itemIndex}`).textContent = lineTotal.toFixed(2);
        
        // 重新計算總額
        recalculateTotalAmount();
      }
    }

    // 重新計算總額
    function recalculateTotalAmount() {
      let total = 0;
      const priceInputs = document.querySelectorAll('.price-input');
      
      priceInputs.forEach((input, index) => {
        const quantity = getCurrentOrderItems()[index]?.quantity || 1;
        const price = parseFloat(input.value) || 0;
        total += price * quantity;
      });
      
      // 加上運費 (假設固定50元)
      total += 50;
      
      document.getElementById('editTotalAmount').value = total.toFixed(2);
    }

    // 取得當前編輯的訂單商品列表
    function getCurrentOrderItems() {
      // 這裡應該從伺服器取得最新的商品列表
      // 暫時返回空陣列，實際實作時需要改善
      return [];
    }

    // 儲存訂單變更
    async function saveOrderChanges() {
      if (!currentEditOrderId) return;
      
      try {
        const formData = {
          contact_name: document.getElementById('editCustomerName').value,
          contact_phone: document.getElementById('editCustomerPhone').value,
          address: document.getElementById('editAddress').value,
          status: document.getElementById('editStatus').value,
          notes: document.getElementById('editNotes').value,
          total_amount: parseFloat(document.getElementById('editTotalAmount').value),
          // 收集商品價格變更
          items: collectItemPriceChanges()
        };
        
        const response = await fetch(`/api/admin/orders/${currentEditOrderId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });
        
        const result = await response.json();
        
        if (result.success) {
          alert('✅ 訂單更新成功！');
          closeEditModal();
          loadOrders(); // 重新載入訂單列表
        } else {
          alert('❌ 更新失敗: ' + result.message);
        }
        
      } catch (error) {
        console.error('儲存訂單錯誤:', error);
        alert('❌ 儲存時發生錯誤');
      }
    }

    // 收集商品價格變更
    function collectItemPriceChanges() {
      const priceInputs = document.querySelectorAll('.price-input');
      const changes = [];
      
      priceInputs.forEach((input, index) => {
        changes.push({
          index: index,
          new_price: parseFloat(input.value) || 0
        });
      });
      
      return changes;
    }

    // 快速更新訂單狀態
    async function updateOrderStatus(orderId) {
      const newStatus = prompt('請選擇新狀態:\n1. preparing (準備中)\n2. ready (包裝完成)\n3. delivering (配送中)\n4. completed (已完成)', 'ready');
      
      if (!newStatus) return;
      
      const validStatuses = ['preparing', 'ready', 'delivering', 'completed'];
      if (!validStatuses.includes(newStatus)) {
        alert('無效的狀態！');
        return;
      }
      
      try {
        const response = await fetch(`/api/orders/${orderId}/status`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ 
            status: newStatus,
            notes: `後台管理更新為${getStatusText(newStatus)}`
          })
        });
        
        const result = await response.json();
        
        if (result.success) {
          alert(`✅ 訂單 #${orderId} 狀態已更新為 ${getStatusText(newStatus)}`);
          loadOrders();
        } else {
          alert('❌ 狀態更新失敗: ' + result.message);
        }
        
      } catch (error) {
        console.error('更新狀態錯誤:', error);
        alert('❌ 更新狀態時發生錯誤');
      }
    }

    // 關閉編輯 Modal
    function closeEditModal() {
      document.getElementById('editOrderModal').style.display = 'none';
      currentEditOrderId = null;
    }

    // 顯示載入狀態
    function showLoading() {
      document.getElementById('ordersTableBody').innerHTML = `
        <tr>
          <td colspan="8" class="loading">
            <div>📦 載入訂單中...</div>
          </td>
        </tr>
      `;
    }

    // 顯示錯誤訊息
    function showError(message) {
      document.getElementById('ordersTableBody').innerHTML = `
        <tr>
          <td colspan="8" class="empty-state">
            <div style="color: #e53e3e;">❌ ${message}</div>
          </td>
        </tr>
      `;
    }

    // 輔助函數
    function getStatusText(status) {
      const statusMap = {
        'preparing': '準備中',
        'ready': '包裝完成',
        'delivering': '配送中',
        'completed': '已完成'
      };
      return statusMap[status] || status;
    }

    function formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleString('zh-TW');
    }

    function truncateText(text, maxLength) {
      if (text.length <= maxLength) return text;
      return text.substring(0, maxLength) + '...';
    }

    // 點擊 Modal 外部關閉
    window.onclick = function(event) {
      const modal = document.getElementById('editOrderModal');
      if (event.target === modal) {
        closeEditModal();
      }
    }
  </script>
</body>
</html>